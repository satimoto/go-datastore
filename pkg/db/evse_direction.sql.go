// Code generated by sqlc. DO NOT EDIT.
// source: evse_direction.sql

package db

import (
	"context"
)

const deleteEvseDirections = `-- name: DeleteEvseDirections :exec
DELETE FROM display_texts dt
  USING evse_directions ed
  WHERE ed.display_text_id = dt.id AND ed.evse_id = $1
`

func (q *Queries) DeleteEvseDirections(ctx context.Context, evseID int64) error {
	_, err := q.db.ExecContext(ctx, deleteEvseDirections, evseID)
	return err
}

const listEvseDirections = `-- name: ListEvseDirections :many
SELECT dt.id, dt.language, dt.text FROM display_texts dt
  INNER JOIN evse_directions ed ON ed.display_text_id = dt.id
  WHERE ed.evse_id = $1
  ORDER BY dt.id
`

func (q *Queries) ListEvseDirections(ctx context.Context, evseID int64) ([]DisplayText, error) {
	rows, err := q.db.QueryContext(ctx, listEvseDirections, evseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DisplayText
	for rows.Next() {
		var i DisplayText
		if err := rows.Scan(&i.ID, &i.Language, &i.Text); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setEvseDirection = `-- name: SetEvseDirection :exec
INSERT INTO evse_directions (evse_id, display_text_id)
  VALUES ($1, $2)
`

type SetEvseDirectionParams struct {
	EvseID        int64 `db:"evse_id" json:"evseID"`
	DisplayTextID int64 `db:"display_text_id" json:"displayTextID"`
}

func (q *Queries) SetEvseDirection(ctx context.Context, arg SetEvseDirectionParams) error {
	_, err := q.db.ExecContext(ctx, setEvseDirection, arg.EvseID, arg.DisplayTextID)
	return err
}
