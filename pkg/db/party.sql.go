// Code generated by sqlc. DO NOT EDIT.
// source: party.sql

package db

import (
	"context"
)

const createParty = `-- name: CreateParty :one
INSERT INTO parties (
    credential_id,
    country_code,
    party_id,
    is_intermediate_cdr_capable,
    publish_location,
    publish_null_tariff
  ) VALUES ($1, $2, $3, $4, $5, $6)
  RETURNING id, credential_id, country_code, party_id, is_intermediate_cdr_capable, publish_location, publish_null_tariff
`

type CreatePartyParams struct {
	CredentialID             int64  `db:"credential_id" json:"credentialID"`
	CountryCode              string `db:"country_code" json:"countryCode"`
	PartyID                  string `db:"party_id" json:"partyID"`
	IsIntermediateCdrCapable bool   `db:"is_intermediate_cdr_capable" json:"isIntermediateCdrCapable"`
	PublishLocation          bool   `db:"publish_location" json:"publishLocation"`
	PublishNullTariff        bool   `db:"publish_null_tariff" json:"publishNullTariff"`
}

func (q *Queries) CreateParty(ctx context.Context, arg CreatePartyParams) (Party, error) {
	row := q.db.QueryRowContext(ctx, createParty,
		arg.CredentialID,
		arg.CountryCode,
		arg.PartyID,
		arg.IsIntermediateCdrCapable,
		arg.PublishLocation,
		arg.PublishNullTariff,
	)
	var i Party
	err := row.Scan(
		&i.ID,
		&i.CredentialID,
		&i.CountryCode,
		&i.PartyID,
		&i.IsIntermediateCdrCapable,
		&i.PublishLocation,
		&i.PublishNullTariff,
	)
	return i, err
}

const getParty = `-- name: GetParty :one
SELECT id, credential_id, country_code, party_id, is_intermediate_cdr_capable, publish_location, publish_null_tariff FROM parties
  WHERE id = $1
`

func (q *Queries) GetParty(ctx context.Context, id int64) (Party, error) {
	row := q.db.QueryRowContext(ctx, getParty, id)
	var i Party
	err := row.Scan(
		&i.ID,
		&i.CredentialID,
		&i.CountryCode,
		&i.PartyID,
		&i.IsIntermediateCdrCapable,
		&i.PublishLocation,
		&i.PublishNullTariff,
	)
	return i, err
}

const getPartyByCredential = `-- name: GetPartyByCredential :one
SELECT id, credential_id, country_code, party_id, is_intermediate_cdr_capable, publish_location, publish_null_tariff FROM parties
  WHERE credential_id = $1 AND country_code = $2 AND party_id = $3
`

type GetPartyByCredentialParams struct {
	CredentialID int64  `db:"credential_id" json:"credentialID"`
	CountryCode  string `db:"country_code" json:"countryCode"`
	PartyID      string `db:"party_id" json:"partyID"`
}

func (q *Queries) GetPartyByCredential(ctx context.Context, arg GetPartyByCredentialParams) (Party, error) {
	row := q.db.QueryRowContext(ctx, getPartyByCredential, arg.CredentialID, arg.CountryCode, arg.PartyID)
	var i Party
	err := row.Scan(
		&i.ID,
		&i.CredentialID,
		&i.CountryCode,
		&i.PartyID,
		&i.IsIntermediateCdrCapable,
		&i.PublishLocation,
		&i.PublishNullTariff,
	)
	return i, err
}

const listPartiesByCredentialID = `-- name: ListPartiesByCredentialID :many
SELECT id, credential_id, country_code, party_id, is_intermediate_cdr_capable, publish_location, publish_null_tariff FROM parties
  WHERE credential_id = $1
`

func (q *Queries) ListPartiesByCredentialID(ctx context.Context, credentialID int64) ([]Party, error) {
	rows, err := q.db.QueryContext(ctx, listPartiesByCredentialID, credentialID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Party
	for rows.Next() {
		var i Party
		if err := rows.Scan(
			&i.ID,
			&i.CredentialID,
			&i.CountryCode,
			&i.PartyID,
			&i.IsIntermediateCdrCapable,
			&i.PublishLocation,
			&i.PublishNullTariff,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateParty = `-- name: UpdateParty :one
UPDATE parties SET (
    is_intermediate_cdr_capable,
    publish_location,
    publish_null_tariff
  ) = ($2, $3, $4)
  WHERE id = $1
  RETURNING id, credential_id, country_code, party_id, is_intermediate_cdr_capable, publish_location, publish_null_tariff
`

type UpdatePartyParams struct {
	ID                       int64 `db:"id" json:"id"`
	IsIntermediateCdrCapable bool  `db:"is_intermediate_cdr_capable" json:"isIntermediateCdrCapable"`
	PublishLocation          bool  `db:"publish_location" json:"publishLocation"`
	PublishNullTariff        bool  `db:"publish_null_tariff" json:"publishNullTariff"`
}

func (q *Queries) UpdateParty(ctx context.Context, arg UpdatePartyParams) (Party, error) {
	row := q.db.QueryRowContext(ctx, updateParty,
		arg.ID,
		arg.IsIntermediateCdrCapable,
		arg.PublishLocation,
		arg.PublishNullTariff,
	)
	var i Party
	err := row.Scan(
		&i.ID,
		&i.CredentialID,
		&i.CountryCode,
		&i.PartyID,
		&i.IsIntermediateCdrCapable,
		&i.PublishLocation,
		&i.PublishNullTariff,
	)
	return i, err
}

const updatePartyByCredential = `-- name: UpdatePartyByCredential :one
UPDATE parties SET (
    is_intermediate_cdr_capable,
    publish_location,
    publish_null_tariff
  ) = ($4, $5, $6)
  WHERE credential_id = $1 AND country_code = $2 AND party_id = $3
  RETURNING id, credential_id, country_code, party_id, is_intermediate_cdr_capable, publish_location, publish_null_tariff
`

type UpdatePartyByCredentialParams struct {
	CredentialID             int64  `db:"credential_id" json:"credentialID"`
	CountryCode              string `db:"country_code" json:"countryCode"`
	PartyID                  string `db:"party_id" json:"partyID"`
	IsIntermediateCdrCapable bool   `db:"is_intermediate_cdr_capable" json:"isIntermediateCdrCapable"`
	PublishLocation          bool   `db:"publish_location" json:"publishLocation"`
	PublishNullTariff        bool   `db:"publish_null_tariff" json:"publishNullTariff"`
}

func (q *Queries) UpdatePartyByCredential(ctx context.Context, arg UpdatePartyByCredentialParams) (Party, error) {
	row := q.db.QueryRowContext(ctx, updatePartyByCredential,
		arg.CredentialID,
		arg.CountryCode,
		arg.PartyID,
		arg.IsIntermediateCdrCapable,
		arg.PublishLocation,
		arg.PublishNullTariff,
	)
	var i Party
	err := row.Scan(
		&i.ID,
		&i.CredentialID,
		&i.CountryCode,
		&i.PartyID,
		&i.IsIntermediateCdrCapable,
		&i.PublishLocation,
		&i.PublishNullTariff,
	)
	return i, err
}
