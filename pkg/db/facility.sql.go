// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: facility.sql

package db

import (
	"context"
)

const getFacility = `-- name: GetFacility :one
SELECT id, text, description FROM facilities
  WHERE id = $1
`

func (q *Queries) GetFacility(ctx context.Context, id int64) (Facility, error) {
	row := q.db.QueryRowContext(ctx, getFacility, id)
	var i Facility
	err := row.Scan(&i.ID, &i.Text, &i.Description)
	return i, err
}

const listFacilities = `-- name: ListFacilities :many
SELECT id, text, description FROM facilities
  ORDER BY id
`

func (q *Queries) ListFacilities(ctx context.Context) ([]Facility, error) {
	rows, err := q.db.QueryContext(ctx, listFacilities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Facility
	for rows.Next() {
		var i Facility
		if err := rows.Scan(&i.ID, &i.Text, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
