// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: business_detail.sql

package db

import (
	"context"
	"database/sql"
)

const createBusinessDetail = `-- name: CreateBusinessDetail :one
INSERT INTO business_details (name, website, logo_id)
  VALUES ($1, $2, $3)
  RETURNING id, name, website, logo_id
`

type CreateBusinessDetailParams struct {
	Name    string         `db:"name" json:"name"`
	Website sql.NullString `db:"website" json:"website"`
	LogoID  sql.NullInt64  `db:"logo_id" json:"logoID"`
}

func (q *Queries) CreateBusinessDetail(ctx context.Context, arg CreateBusinessDetailParams) (BusinessDetail, error) {
	row := q.db.QueryRowContext(ctx, createBusinessDetail, arg.Name, arg.Website, arg.LogoID)
	var i BusinessDetail
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Website,
		&i.LogoID,
	)
	return i, err
}

const deleteBusinessDetail = `-- name: DeleteBusinessDetail :exec
DELETE FROM business_details
  WHERE id = $1
`

func (q *Queries) DeleteBusinessDetail(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBusinessDetail, id)
	return err
}

const deleteBusinessDetailLogo = `-- name: DeleteBusinessDetailLogo :exec
DELETE FROM images im
  USING business_details bd
  WHERE bd.logo_id = im.id AND bd.id = $1
`

func (q *Queries) DeleteBusinessDetailLogo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBusinessDetailLogo, id)
	return err
}

const getBusinessDetail = `-- name: GetBusinessDetail :one
SELECT id, name, website, logo_id FROM business_details
  WHERE id = $1
`

func (q *Queries) GetBusinessDetail(ctx context.Context, id int64) (BusinessDetail, error) {
	row := q.db.QueryRowContext(ctx, getBusinessDetail, id)
	var i BusinessDetail
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Website,
		&i.LogoID,
	)
	return i, err
}

const updateBusinessDetail = `-- name: UpdateBusinessDetail :one
UPDATE business_details SET (
    name, 
    website, 
    logo_id
  ) = ($2, $3, $4)
  WHERE id = $1
  RETURNING id, name, website, logo_id
`

type UpdateBusinessDetailParams struct {
	ID      int64          `db:"id" json:"id"`
	Name    string         `db:"name" json:"name"`
	Website sql.NullString `db:"website" json:"website"`
	LogoID  sql.NullInt64  `db:"logo_id" json:"logoID"`
}

func (q *Queries) UpdateBusinessDetail(ctx context.Context, arg UpdateBusinessDetailParams) (BusinessDetail, error) {
	row := q.db.QueryRowContext(ctx, updateBusinessDetail,
		arg.ID,
		arg.Name,
		arg.Website,
		arg.LogoID,
	)
	var i BusinessDetail
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Website,
		&i.LogoID,
	)
	return i, err
}
