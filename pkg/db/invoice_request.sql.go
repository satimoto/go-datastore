// Code generated by sqlc. DO NOT EDIT.
// source: invoice_request.sql

package db

import (
	"context"
	"database/sql"
)

const createInvoiceRequest = `-- name: CreateInvoiceRequest :one
INSERT INTO invoice_requests (
    user_id,
    promotion_id,
    amount_msat,
    is_settled, 
    payment_request
  ) VALUES ($1, $2, $3, $4, $5)
  RETURNING id, user_id, promotion_id, amount_msat, is_settled, payment_request
`

type CreateInvoiceRequestParams struct {
	UserID         int64          `db:"user_id" json:"userID"`
	PromotionID    int64          `db:"promotion_id" json:"promotionID"`
	AmountMsat     int64          `db:"amount_msat" json:"amountMsat"`
	IsSettled      bool           `db:"is_settled" json:"isSettled"`
	PaymentRequest sql.NullString `db:"payment_request" json:"paymentRequest"`
}

func (q *Queries) CreateInvoiceRequest(ctx context.Context, arg CreateInvoiceRequestParams) (InvoiceRequest, error) {
	row := q.db.QueryRowContext(ctx, createInvoiceRequest,
		arg.UserID,
		arg.PromotionID,
		arg.AmountMsat,
		arg.IsSettled,
		arg.PaymentRequest,
	)
	var i InvoiceRequest
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PromotionID,
		&i.AmountMsat,
		&i.IsSettled,
		&i.PaymentRequest,
	)
	return i, err
}

const deleteInvoiceRequest = `-- name: DeleteInvoiceRequest :exec
DELETE FROM invoice_requests
  WHERE id = $1
`

func (q *Queries) DeleteInvoiceRequest(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteInvoiceRequest, id)
	return err
}

const getUnsettledInvoiceRequestByPromotionCode = `-- name: GetUnsettledInvoiceRequestByPromotionCode :one
SELECT ir.id, ir.user_id, ir.promotion_id, ir.amount_msat, ir.is_settled, ir.payment_request FROM invoice_requests ir
  INNER JOIN promotions p ON p.id = ir.promotion_id
  WHERE p.code = $2 AND ir.user_id = $1 AND NOT ir.is_settled AND ir.payment_request IS NULL
`

type GetUnsettledInvoiceRequestByPromotionCodeParams struct {
	UserID int64  `db:"user_id" json:"userID"`
	Code   string `db:"code" json:"code"`
}

func (q *Queries) GetUnsettledInvoiceRequestByPromotionCode(ctx context.Context, arg GetUnsettledInvoiceRequestByPromotionCodeParams) (InvoiceRequest, error) {
	row := q.db.QueryRowContext(ctx, getUnsettledInvoiceRequestByPromotionCode, arg.UserID, arg.Code)
	var i InvoiceRequest
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PromotionID,
		&i.AmountMsat,
		&i.IsSettled,
		&i.PaymentRequest,
	)
	return i, err
}

const listUnsettledInvoiceRequests = `-- name: ListUnsettledInvoiceRequests :many
SELECT id, user_id, promotion_id, amount_msat, is_settled, payment_request FROM invoice_requests
  WHERE NOT user_id = $1 AND is_settled AND payment_request IS NULL
  ORDER BY id
`

func (q *Queries) ListUnsettledInvoiceRequests(ctx context.Context, userID int64) ([]InvoiceRequest, error) {
	rows, err := q.db.QueryContext(ctx, listUnsettledInvoiceRequests, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []InvoiceRequest
	for rows.Next() {
		var i InvoiceRequest
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PromotionID,
			&i.AmountMsat,
			&i.IsSettled,
			&i.PaymentRequest,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInvoiceRequest = `-- name: UpdateInvoiceRequest :one
UPDATE invoice_requests SET (
    amount_msat,
    is_settled,
    payment_request
  ) = ($2, $3, $4)
  WHERE id = $1
  RETURNING id, user_id, promotion_id, amount_msat, is_settled, payment_request
`

type UpdateInvoiceRequestParams struct {
	ID             int64          `db:"id" json:"id"`
	AmountMsat     int64          `db:"amount_msat" json:"amountMsat"`
	IsSettled      bool           `db:"is_settled" json:"isSettled"`
	PaymentRequest sql.NullString `db:"payment_request" json:"paymentRequest"`
}

func (q *Queries) UpdateInvoiceRequest(ctx context.Context, arg UpdateInvoiceRequestParams) (InvoiceRequest, error) {
	row := q.db.QueryRowContext(ctx, updateInvoiceRequest,
		arg.ID,
		arg.AmountMsat,
		arg.IsSettled,
		arg.PaymentRequest,
	)
	var i InvoiceRequest
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PromotionID,
		&i.AmountMsat,
		&i.IsSettled,
		&i.PaymentRequest,
	)
	return i, err
}
