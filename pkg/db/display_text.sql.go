// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: display_text.sql

package db

import (
	"context"
)

const createDisplayText = `-- name: CreateDisplayText :one
INSERT INTO display_texts (language, text)
  VALUES ($1, $2)
  RETURNING id, language, text
`

type CreateDisplayTextParams struct {
	Language string `db:"language" json:"language"`
	Text     string `db:"text" json:"text"`
}

func (q *Queries) CreateDisplayText(ctx context.Context, arg CreateDisplayTextParams) (DisplayText, error) {
	row := q.db.QueryRowContext(ctx, createDisplayText, arg.Language, arg.Text)
	var i DisplayText
	err := row.Scan(&i.ID, &i.Language, &i.Text)
	return i, err
}

const deleteDisplayText = `-- name: DeleteDisplayText :exec
DELETE FROM display_texts
  WHERE id = $1
`

func (q *Queries) DeleteDisplayText(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDisplayText, id)
	return err
}

const getDisplayText = `-- name: GetDisplayText :one
SELECT id, language, text FROM display_texts
  WHERE id = $1
`

func (q *Queries) GetDisplayText(ctx context.Context, id int64) (DisplayText, error) {
	row := q.db.QueryRowContext(ctx, getDisplayText, id)
	var i DisplayText
	err := row.Scan(&i.ID, &i.Language, &i.Text)
	return i, err
}

const listDisplayTexts = `-- name: ListDisplayTexts :many
SELECT id, language, text FROM display_texts
  ORDER BY id
`

func (q *Queries) ListDisplayTexts(ctx context.Context) ([]DisplayText, error) {
	rows, err := q.db.QueryContext(ctx, listDisplayTexts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DisplayText
	for rows.Next() {
		var i DisplayText
		if err := rows.Scan(&i.ID, &i.Language, &i.Text); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDisplayText = `-- name: UpdateDisplayText :one
UPDATE display_texts SET (
    language, 
    text
  ) = ($2, $3)
  WHERE id = $1
  RETURNING id, language, text
`

type UpdateDisplayTextParams struct {
	ID       int64  `db:"id" json:"id"`
	Language string `db:"language" json:"language"`
	Text     string `db:"text" json:"text"`
}

func (q *Queries) UpdateDisplayText(ctx context.Context, arg UpdateDisplayTextParams) (DisplayText, error) {
	row := q.db.QueryRowContext(ctx, updateDisplayText, arg.ID, arg.Language, arg.Text)
	var i DisplayText
	err := row.Scan(&i.ID, &i.Language, &i.Text)
	return i, err
}
