// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: location_facility.sql

package db

import (
	"context"
)

const listLocationFacilities = `-- name: ListLocationFacilities :many
SELECT fa.id, fa.text, fa.description FROM facilities fa
  INNER JOIN location_facilities lf ON lf.facility_id = fa.id
  WHERE lf.location_id = $1
  ORDER BY fa.id
`

func (q *Queries) ListLocationFacilities(ctx context.Context, locationID int64) ([]Facility, error) {
	rows, err := q.db.QueryContext(ctx, listLocationFacilities, locationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Facility
	for rows.Next() {
		var i Facility
		if err := rows.Scan(&i.ID, &i.Text, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setLocationFacility = `-- name: SetLocationFacility :exec
INSERT INTO location_facilities (location_id, facility_id)
  VALUES ($1, $2)
`

type SetLocationFacilityParams struct {
	LocationID int64 `db:"location_id" json:"locationID"`
	FacilityID int64 `db:"facility_id" json:"facilityID"`
}

func (q *Queries) SetLocationFacility(ctx context.Context, arg SetLocationFacilityParams) error {
	_, err := q.db.ExecContext(ctx, setLocationFacility, arg.LocationID, arg.FacilityID)
	return err
}

const unsetLocationFacilities = `-- name: UnsetLocationFacilities :exec
DELETE FROM location_facilities lf
  WHERE lf.location_id = $1
`

func (q *Queries) UnsetLocationFacilities(ctx context.Context, locationID int64) error {
	_, err := q.db.ExecContext(ctx, unsetLocationFacilities, locationID)
	return err
}
