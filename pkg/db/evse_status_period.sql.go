// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: evse_status_period.sql

package db

import (
	"context"
	"time"
)

const createEvseStatusPeriod = `-- name: CreateEvseStatusPeriod :one
INSERT INTO evse_status_periods (
    evse_id, 
    status, 
    start_date, 
    end_date
  ) VALUES ($1, $2, $3, $4)
  RETURNING id, evse_id, status, start_date, end_date
`

type CreateEvseStatusPeriodParams struct {
	EvseID    int64      `db:"evse_id" json:"evseID"`
	Status    EvseStatus `db:"status" json:"status"`
	StartDate time.Time  `db:"start_date" json:"startDate"`
	EndDate   time.Time  `db:"end_date" json:"endDate"`
}

func (q *Queries) CreateEvseStatusPeriod(ctx context.Context, arg CreateEvseStatusPeriodParams) (EvseStatusPeriod, error) {
	row := q.db.QueryRowContext(ctx, createEvseStatusPeriod,
		arg.EvseID,
		arg.Status,
		arg.StartDate,
		arg.EndDate,
	)
	var i EvseStatusPeriod
	err := row.Scan(
		&i.ID,
		&i.EvseID,
		&i.Status,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const listEvseStatusPeriods = `-- name: ListEvseStatusPeriods :many
SELECT id, evse_id, status, start_date, end_date FROM evse_status_periods
  WHERE evse_id = $1
  ORDER BY id
`

func (q *Queries) ListEvseStatusPeriods(ctx context.Context, evseID int64) ([]EvseStatusPeriod, error) {
	rows, err := q.db.QueryContext(ctx, listEvseStatusPeriods, evseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EvseStatusPeriod
	for rows.Next() {
		var i EvseStatusPeriod
		if err := rows.Scan(
			&i.ID,
			&i.EvseID,
			&i.Status,
			&i.StartDate,
			&i.EndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
