// Code generated by sqlc. DO NOT EDIT.
// source: promotion.sql

package db

import (
	"context"
	"database/sql"
)

const createPromotion = `-- name: CreatePromotion :one
INSERT INTO promotions (
    code,
    description,
    start_date,
    end_date
  ) VALUES ($1, $2, $3, $4)
  RETURNING id, code, description, is_active, start_date, end_date
`

type CreatePromotionParams struct {
	Code        string       `db:"code" json:"code"`
	Description string       `db:"description" json:"description"`
	StartDate   sql.NullTime `db:"start_date" json:"startDate"`
	EndDate     sql.NullTime `db:"end_date" json:"endDate"`
}

func (q *Queries) CreatePromotion(ctx context.Context, arg CreatePromotionParams) (Promotion, error) {
	row := q.db.QueryRowContext(ctx, createPromotion,
		arg.Code,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
	)
	var i Promotion
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Description,
		&i.IsActive,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const getPromotion = `-- name: GetPromotion :one
SELECT id, code, description, is_active, start_date, end_date FROM promotions
  WHERE id = $1
`

func (q *Queries) GetPromotion(ctx context.Context, id int64) (Promotion, error) {
	row := q.db.QueryRowContext(ctx, getPromotion, id)
	var i Promotion
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Description,
		&i.IsActive,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const getPromotionByCode = `-- name: GetPromotionByCode :one
SELECT id, code, description, is_active, start_date, end_date FROM promotions
  WHERE code = $1
`

func (q *Queries) GetPromotionByCode(ctx context.Context, code string) (Promotion, error) {
	row := q.db.QueryRowContext(ctx, getPromotionByCode, code)
	var i Promotion
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Description,
		&i.IsActive,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}
