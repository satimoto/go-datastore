// Code generated by sqlc. DO NOT EDIT.
// source: data_import.sql

package db

import (
	"context"
)

const getHtbTariffByName = `-- name: GetHtbTariffByName :one
SELECT id, name, currency, time_price, time_min_duration, energy_price, flat_price FROM htb_tariffs
  WHERE name = $1
`

func (q *Queries) GetHtbTariffByName(ctx context.Context, name string) (HtbTariff, error) {
	row := q.db.QueryRowContext(ctx, getHtbTariffByName, name)
	var i HtbTariff
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Currency,
		&i.TimePrice,
		&i.TimeMinDuration,
		&i.EnergyPrice,
		&i.FlatPrice,
	)
	return i, err
}

const listHtbTariffs = `-- name: ListHtbTariffs :many
SELECT id, name, currency, time_price, time_min_duration, energy_price, flat_price FROM htb_tariffs
`

func (q *Queries) ListHtbTariffs(ctx context.Context) ([]HtbTariff, error) {
	rows, err := q.db.QueryContext(ctx, listHtbTariffs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HtbTariff
	for rows.Next() {
		var i HtbTariff
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Currency,
			&i.TimePrice,
			&i.TimeMinDuration,
			&i.EnergyPrice,
			&i.FlatPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
