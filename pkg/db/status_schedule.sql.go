// Code generated by sqlc. DO NOT EDIT.
// source: status_schedule.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createStatusSchedule = `-- name: CreateStatusSchedule :one
INSERT INTO status_schedules (
    evse_id, 
    period_begin, 
    period_end, 
    status
  ) VALUES ($1, $2, $3, $3)
  RETURNING id, evse_id, period_begin, period_end, status
`

type CreateStatusScheduleParams struct {
	EvseID      int64        `db:"evse_id" json:"evseID"`
	PeriodBegin time.Time    `db:"period_begin" json:"periodBegin"`
	PeriodEnd   sql.NullTime `db:"period_end" json:"periodEnd"`
}

func (q *Queries) CreateStatusSchedule(ctx context.Context, arg CreateStatusScheduleParams) (StatusSchedule, error) {
	row := q.db.QueryRowContext(ctx, createStatusSchedule, arg.EvseID, arg.PeriodBegin, arg.PeriodEnd)
	var i StatusSchedule
	err := row.Scan(
		&i.ID,
		&i.EvseID,
		&i.PeriodBegin,
		&i.PeriodEnd,
		&i.Status,
	)
	return i, err
}

const deleteStatusSchedules = `-- name: DeleteStatusSchedules :exec
DELETE FROM status_schedules
  WHERE evse_id = $1
`

func (q *Queries) DeleteStatusSchedules(ctx context.Context, evseID int64) error {
	_, err := q.db.ExecContext(ctx, deleteStatusSchedules, evseID)
	return err
}

const listStatusSchedules = `-- name: ListStatusSchedules :many
SELECT id, evse_id, period_begin, period_end, status FROM status_schedules
  WHERE evse_id = $1
  ORDER BY id
`

func (q *Queries) ListStatusSchedules(ctx context.Context, evseID int64) ([]StatusSchedule, error) {
	rows, err := q.db.QueryContext(ctx, listStatusSchedules, evseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StatusSchedule
	for rows.Next() {
		var i StatusSchedule
		if err := rows.Scan(
			&i.ID,
			&i.EvseID,
			&i.PeriodBegin,
			&i.PeriodEnd,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
