// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: location_image.sql

package db

import (
	"context"
)

const deleteLocationImages = `-- name: DeleteLocationImages :exec
DELETE FROM images im
  USING location_images li
  WHERE li.image_id = im.id AND li.location_id = $1
`

func (q *Queries) DeleteLocationImages(ctx context.Context, locationID int64) error {
	_, err := q.db.ExecContext(ctx, deleteLocationImages, locationID)
	return err
}

const listLocationImages = `-- name: ListLocationImages :many
SELECT im.id, im.url, im.thumbnail, im.category, im.type, im.width, im.height FROM images im
  INNER JOIN location_images li ON li.image_id = im.id
  WHERE li.location_id = $1
  ORDER BY im.id
`

func (q *Queries) ListLocationImages(ctx context.Context, locationID int64) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, listLocationImages, locationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.Thumbnail,
			&i.Category,
			&i.Type,
			&i.Width,
			&i.Height,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setLocationImage = `-- name: SetLocationImage :exec
INSERT INTO location_images (location_id, image_id)
  VALUES ($1, $2)
`

type SetLocationImageParams struct {
	LocationID int64 `db:"location_id" json:"locationID"`
	ImageID    int64 `db:"image_id" json:"imageID"`
}

func (q *Queries) SetLocationImage(ctx context.Context, arg SetLocationImageParams) error {
	_, err := q.db.ExecContext(ctx, setLocationImage, arg.LocationID, arg.ImageID)
	return err
}
