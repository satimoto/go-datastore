// Code generated by sqlc. DO NOT EDIT.
// source: location_direction.sql

package db

import (
	"context"
)

const deleteLocationDirections = `-- name: DeleteLocationDirections :exec
DELETE FROM display_texts dt
  USING location_directions ld
  WHERE ld.display_text_id = dt.id AND ld.location_id = $1
`

func (q *Queries) DeleteLocationDirections(ctx context.Context, locationID int64) error {
	_, err := q.db.ExecContext(ctx, deleteLocationDirections, locationID)
	return err
}

const listLocationDirections = `-- name: ListLocationDirections :many
SELECT dt.id, dt.language, dt.text FROM display_texts dt
  INNER JOIN location_directions ld ON ld.display_text_id = dt.id
  WHERE ld.location_id = $1
  ORDER BY dt.id
`

func (q *Queries) ListLocationDirections(ctx context.Context, locationID int64) ([]DisplayText, error) {
	rows, err := q.db.QueryContext(ctx, listLocationDirections, locationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DisplayText
	for rows.Next() {
		var i DisplayText
		if err := rows.Scan(&i.ID, &i.Language, &i.Text); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setLocationDirection = `-- name: SetLocationDirection :exec
INSERT INTO location_directions (location_id, display_text_id)
  VALUES ($1, $2)
`

type SetLocationDirectionParams struct {
	LocationID    int64 `db:"location_id" json:"locationID"`
	DisplayTextID int64 `db:"display_text_id" json:"displayTextID"`
}

func (q *Queries) SetLocationDirection(ctx context.Context, arg SetLocationDirectionParams) error {
	_, err := q.db.ExecContext(ctx, setLocationDirection, arg.LocationID, arg.DisplayTextID)
	return err
}
