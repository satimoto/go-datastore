// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: charging_period_dimension.sql

package db

import (
	"context"
)

const createChargingPeriodDimension = `-- name: CreateChargingPeriodDimension :one
INSERT INTO charging_period_dimensions (
    charging_period_id,
    type,
    volume
  ) VALUES ($1, $2, $3)
  RETURNING id, charging_period_id, type, volume
`

type CreateChargingPeriodDimensionParams struct {
	ChargingPeriodID int64                       `db:"charging_period_id" json:"chargingPeriodID"`
	Type             ChargingPeriodDimensionType `db:"type" json:"type"`
	Volume           float64                     `db:"volume" json:"volume"`
}

func (q *Queries) CreateChargingPeriodDimension(ctx context.Context, arg CreateChargingPeriodDimensionParams) (ChargingPeriodDimension, error) {
	row := q.db.QueryRowContext(ctx, createChargingPeriodDimension, arg.ChargingPeriodID, arg.Type, arg.Volume)
	var i ChargingPeriodDimension
	err := row.Scan(
		&i.ID,
		&i.ChargingPeriodID,
		&i.Type,
		&i.Volume,
	)
	return i, err
}

const deleteChargingPeriodDimensions = `-- name: DeleteChargingPeriodDimensions :exec
DELETE FROM charging_period_dimensions cpd
  WHERE cpd.charging_period_id = $1
`

func (q *Queries) DeleteChargingPeriodDimensions(ctx context.Context, chargingPeriodID int64) error {
	_, err := q.db.ExecContext(ctx, deleteChargingPeriodDimensions, chargingPeriodID)
	return err
}

const listChargingPeriodDimensions = `-- name: ListChargingPeriodDimensions :many
SELECT cpd.id, cpd.charging_period_id, cpd.type, cpd.volume FROM charging_period_dimensions cpd
  WHERE cpd.charging_period_id = $1
  ORDER BY cpd.id
`

func (q *Queries) ListChargingPeriodDimensions(ctx context.Context, chargingPeriodID int64) ([]ChargingPeriodDimension, error) {
	rows, err := q.db.QueryContext(ctx, listChargingPeriodDimensions, chargingPeriodID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChargingPeriodDimension
	for rows.Next() {
		var i ChargingPeriodDimension
		if err := rows.Scan(
			&i.ID,
			&i.ChargingPeriodID,
			&i.Type,
			&i.Volume,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
