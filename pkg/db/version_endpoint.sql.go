// Code generated by sqlc. DO NOT EDIT.
// source: version_endpoint.sql

package db

import (
	"context"
)

const createVersionEndpoint = `-- name: CreateVersionEndpoint :one
INSERT INTO version_endpoints (
    version_id, 
    identifier, 
    url
  ) VALUES ($1, $2, $3)
  RETURNING id, version_id, identifier, url
`

type CreateVersionEndpointParams struct {
	VersionID  int64  `db:"version_id" json:"versionID"`
	Identifier string `db:"identifier" json:"identifier"`
	Url        string `db:"url" json:"url"`
}

func (q *Queries) CreateVersionEndpoint(ctx context.Context, arg CreateVersionEndpointParams) (VersionEndpoint, error) {
	row := q.db.QueryRowContext(ctx, createVersionEndpoint, arg.VersionID, arg.Identifier, arg.Url)
	var i VersionEndpoint
	err := row.Scan(
		&i.ID,
		&i.VersionID,
		&i.Identifier,
		&i.Url,
	)
	return i, err
}

const deleteVersionEndpoints = `-- name: DeleteVersionEndpoints :exec
DELETE FROM version_endpoints
  WHERE version_id = $1
`

func (q *Queries) DeleteVersionEndpoints(ctx context.Context, versionID int64) error {
	_, err := q.db.ExecContext(ctx, deleteVersionEndpoints, versionID)
	return err
}

const getVersionEndpoint = `-- name: GetVersionEndpoint :one
SELECT id, version_id, identifier, url FROM version_endpoints
  WHERE id = $1
`

func (q *Queries) GetVersionEndpoint(ctx context.Context, id int64) (VersionEndpoint, error) {
	row := q.db.QueryRowContext(ctx, getVersionEndpoint, id)
	var i VersionEndpoint
	err := row.Scan(
		&i.ID,
		&i.VersionID,
		&i.Identifier,
		&i.Url,
	)
	return i, err
}

const getVersionEndpointByIdentity = `-- name: GetVersionEndpointByIdentity :one
SELECT ve.id, ve.version_id, ve.identifier, ve.url FROM version_endpoints ve
  INNER JOIN credentials c ON vc.version_id = c.version_id
  WHERE ve.identifier = $1 AND c.country_code = $2 AND c.party_id = $3
`

type GetVersionEndpointByIdentityParams struct {
	Identifier  string `db:"identifier" json:"identifier"`
	CountryCode string `db:"country_code" json:"countryCode"`
	PartyID     string `db:"party_id" json:"partyID"`
}

func (q *Queries) GetVersionEndpointByIdentity(ctx context.Context, arg GetVersionEndpointByIdentityParams) (VersionEndpoint, error) {
	row := q.db.QueryRowContext(ctx, getVersionEndpointByIdentity, arg.Identifier, arg.CountryCode, arg.PartyID)
	var i VersionEndpoint
	err := row.Scan(
		&i.ID,
		&i.VersionID,
		&i.Identifier,
		&i.Url,
	)
	return i, err
}

const listVersionEndpoints = `-- name: ListVersionEndpoints :many
SELECT id, version_id, identifier, url FROM version_endpoints
  WHERE version_id = $1
`

func (q *Queries) ListVersionEndpoints(ctx context.Context, versionID int64) ([]VersionEndpoint, error) {
	rows, err := q.db.QueryContext(ctx, listVersionEndpoints, versionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VersionEndpoint
	for rows.Next() {
		var i VersionEndpoint
		if err := rows.Scan(
			&i.ID,
			&i.VersionID,
			&i.Identifier,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
