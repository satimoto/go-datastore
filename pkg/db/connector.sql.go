// Code generated by sqlc. DO NOT EDIT.
// source: connector.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createConnector = `-- name: CreateConnector :one
INSERT INTO connectors (
    evse_id, 
    uid, 
    connector_id, 
    standard, 
    format, 
    power_type, 
    voltage, 
    amperage, 
    wattage, 
    tariff_id, 
    terms_and_conditions, 
    last_updated)
  VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
  RETURNING id, evse_id, uid, connector_id, standard, format, power_type, voltage, amperage, wattage, tariff_id, terms_and_conditions, last_updated
`

type CreateConnectorParams struct {
	EvseID             int64           `db:"evse_id" json:"evseID"`
	Uid                string          `db:"uid" json:"uid"`
	ConnectorID        sql.NullString  `db:"connector_id" json:"connectorID"`
	Standard           ConnectorType   `db:"standard" json:"standard"`
	Format             ConnectorFormat `db:"format" json:"format"`
	PowerType          PowerType       `db:"power_type" json:"powerType"`
	Voltage            int32           `db:"voltage" json:"voltage"`
	Amperage           int32           `db:"amperage" json:"amperage"`
	Wattage            int32           `db:"wattage" json:"wattage"`
	TariffID           sql.NullString  `db:"tariff_id" json:"tariffID"`
	TermsAndConditions sql.NullString  `db:"terms_and_conditions" json:"termsAndConditions"`
	LastUpdated        time.Time       `db:"last_updated" json:"lastUpdated"`
}

func (q *Queries) CreateConnector(ctx context.Context, arg CreateConnectorParams) (Connector, error) {
	row := q.db.QueryRowContext(ctx, createConnector,
		arg.EvseID,
		arg.Uid,
		arg.ConnectorID,
		arg.Standard,
		arg.Format,
		arg.PowerType,
		arg.Voltage,
		arg.Amperage,
		arg.Wattage,
		arg.TariffID,
		arg.TermsAndConditions,
		arg.LastUpdated,
	)
	var i Connector
	err := row.Scan(
		&i.ID,
		&i.EvseID,
		&i.Uid,
		&i.ConnectorID,
		&i.Standard,
		&i.Format,
		&i.PowerType,
		&i.Voltage,
		&i.Amperage,
		&i.Wattage,
		&i.TariffID,
		&i.TermsAndConditions,
		&i.LastUpdated,
	)
	return i, err
}

const deleteConnector = `-- name: DeleteConnector :exec
DELETE FROM connectors
  WHERE id = $1
`

func (q *Queries) DeleteConnector(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteConnector, id)
	return err
}

const deleteConnectorByUid = `-- name: DeleteConnectorByUid :exec
DELETE FROM connectors
  WHERE evse_id = $1 AND uid = $2
`

type DeleteConnectorByUidParams struct {
	EvseID int64  `db:"evse_id" json:"evseID"`
	Uid    string `db:"uid" json:"uid"`
}

func (q *Queries) DeleteConnectorByUid(ctx context.Context, arg DeleteConnectorByUidParams) error {
	_, err := q.db.ExecContext(ctx, deleteConnectorByUid, arg.EvseID, arg.Uid)
	return err
}

const deleteConnectors = `-- name: DeleteConnectors :exec
DELETE FROM connectors
  WHERE evse_id = $1
`

func (q *Queries) DeleteConnectors(ctx context.Context, evseID int64) error {
	_, err := q.db.ExecContext(ctx, deleteConnectors, evseID)
	return err
}

const getConnector = `-- name: GetConnector :one
SELECT id, evse_id, uid, connector_id, standard, format, power_type, voltage, amperage, wattage, tariff_id, terms_and_conditions, last_updated FROM connectors
  WHERE id = $1
`

func (q *Queries) GetConnector(ctx context.Context, id int64) (Connector, error) {
	row := q.db.QueryRowContext(ctx, getConnector, id)
	var i Connector
	err := row.Scan(
		&i.ID,
		&i.EvseID,
		&i.Uid,
		&i.ConnectorID,
		&i.Standard,
		&i.Format,
		&i.PowerType,
		&i.Voltage,
		&i.Amperage,
		&i.Wattage,
		&i.TariffID,
		&i.TermsAndConditions,
		&i.LastUpdated,
	)
	return i, err
}

const getConnectorByConnectorId = `-- name: GetConnectorByConnectorId :one
SELECT id, evse_id, uid, connector_id, standard, format, power_type, voltage, amperage, wattage, tariff_id, terms_and_conditions, last_updated FROM connectors
  WHERE connector_id = $1
`

func (q *Queries) GetConnectorByConnectorId(ctx context.Context, connectorID sql.NullString) (Connector, error) {
	row := q.db.QueryRowContext(ctx, getConnectorByConnectorId, connectorID)
	var i Connector
	err := row.Scan(
		&i.ID,
		&i.EvseID,
		&i.Uid,
		&i.ConnectorID,
		&i.Standard,
		&i.Format,
		&i.PowerType,
		&i.Voltage,
		&i.Amperage,
		&i.Wattage,
		&i.TariffID,
		&i.TermsAndConditions,
		&i.LastUpdated,
	)
	return i, err
}

const getConnectorByUid = `-- name: GetConnectorByUid :one
SELECT id, evse_id, uid, connector_id, standard, format, power_type, voltage, amperage, wattage, tariff_id, terms_and_conditions, last_updated FROM connectors
  WHERE ($1::bigint IS NULL or evse_id = $1::bigint) AND uid = $2::string
  LIMIT 1
`

type GetConnectorByUidParams struct {
	EvseID int64  `db:"evse_id" json:"evseID"`
	Uid    string `db:"uid" json:"uid"`
}

func (q *Queries) GetConnectorByUid(ctx context.Context, arg GetConnectorByUidParams) (Connector, error) {
	row := q.db.QueryRowContext(ctx, getConnectorByUid, arg.EvseID, arg.Uid)
	var i Connector
	err := row.Scan(
		&i.ID,
		&i.EvseID,
		&i.Uid,
		&i.ConnectorID,
		&i.Standard,
		&i.Format,
		&i.PowerType,
		&i.Voltage,
		&i.Amperage,
		&i.Wattage,
		&i.TariffID,
		&i.TermsAndConditions,
		&i.LastUpdated,
	)
	return i, err
}

const listConnectors = `-- name: ListConnectors :many
SELECT id, evse_id, uid, connector_id, standard, format, power_type, voltage, amperage, wattage, tariff_id, terms_and_conditions, last_updated FROM connectors
  WHERE evse_id = $1
  ORDER BY id
`

func (q *Queries) ListConnectors(ctx context.Context, evseID int64) ([]Connector, error) {
	rows, err := q.db.QueryContext(ctx, listConnectors, evseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Connector
	for rows.Next() {
		var i Connector
		if err := rows.Scan(
			&i.ID,
			&i.EvseID,
			&i.Uid,
			&i.ConnectorID,
			&i.Standard,
			&i.Format,
			&i.PowerType,
			&i.Voltage,
			&i.Amperage,
			&i.Wattage,
			&i.TariffID,
			&i.TermsAndConditions,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateConnector = `-- name: UpdateConnector :one
UPDATE connectors SET (
    connector_id,
    standard, 
    format, 
    power_type, 
    voltage, 
    amperage, 
    wattage, 
    tariff_id, 
    terms_and_conditions, 
    last_updated
  ) = ($2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
  WHERE id = $1
  RETURNING id, evse_id, uid, connector_id, standard, format, power_type, voltage, amperage, wattage, tariff_id, terms_and_conditions, last_updated
`

type UpdateConnectorParams struct {
	ID                 int64           `db:"id" json:"id"`
	ConnectorID        sql.NullString  `db:"connector_id" json:"connectorID"`
	Standard           ConnectorType   `db:"standard" json:"standard"`
	Format             ConnectorFormat `db:"format" json:"format"`
	PowerType          PowerType       `db:"power_type" json:"powerType"`
	Voltage            int32           `db:"voltage" json:"voltage"`
	Amperage           int32           `db:"amperage" json:"amperage"`
	Wattage            int32           `db:"wattage" json:"wattage"`
	TariffID           sql.NullString  `db:"tariff_id" json:"tariffID"`
	TermsAndConditions sql.NullString  `db:"terms_and_conditions" json:"termsAndConditions"`
	LastUpdated        time.Time       `db:"last_updated" json:"lastUpdated"`
}

func (q *Queries) UpdateConnector(ctx context.Context, arg UpdateConnectorParams) (Connector, error) {
	row := q.db.QueryRowContext(ctx, updateConnector,
		arg.ID,
		arg.ConnectorID,
		arg.Standard,
		arg.Format,
		arg.PowerType,
		arg.Voltage,
		arg.Amperage,
		arg.Wattage,
		arg.TariffID,
		arg.TermsAndConditions,
		arg.LastUpdated,
	)
	var i Connector
	err := row.Scan(
		&i.ID,
		&i.EvseID,
		&i.Uid,
		&i.ConnectorID,
		&i.Standard,
		&i.Format,
		&i.PowerType,
		&i.Voltage,
		&i.Amperage,
		&i.Wattage,
		&i.TariffID,
		&i.TermsAndConditions,
		&i.LastUpdated,
	)
	return i, err
}

const updateConnectorByUid = `-- name: UpdateConnectorByUid :one
UPDATE connectors SET (
    connector_id,
    standard, 
    format, 
    power_type, 
    voltage, 
    amperage, 
    wattage, 
    tariff_id, 
    terms_and_conditions, 
    last_updated
  ) = ($3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
  WHERE evse_id = $1 AND uid = $2
  RETURNING id, evse_id, uid, connector_id, standard, format, power_type, voltage, amperage, wattage, tariff_id, terms_and_conditions, last_updated
`

type UpdateConnectorByUidParams struct {
	EvseID             int64           `db:"evse_id" json:"evseID"`
	Uid                string          `db:"uid" json:"uid"`
	ConnectorID        sql.NullString  `db:"connector_id" json:"connectorID"`
	Standard           ConnectorType   `db:"standard" json:"standard"`
	Format             ConnectorFormat `db:"format" json:"format"`
	PowerType          PowerType       `db:"power_type" json:"powerType"`
	Voltage            int32           `db:"voltage" json:"voltage"`
	Amperage           int32           `db:"amperage" json:"amperage"`
	Wattage            int32           `db:"wattage" json:"wattage"`
	TariffID           sql.NullString  `db:"tariff_id" json:"tariffID"`
	TermsAndConditions sql.NullString  `db:"terms_and_conditions" json:"termsAndConditions"`
	LastUpdated        time.Time       `db:"last_updated" json:"lastUpdated"`
}

func (q *Queries) UpdateConnectorByUid(ctx context.Context, arg UpdateConnectorByUidParams) (Connector, error) {
	row := q.db.QueryRowContext(ctx, updateConnectorByUid,
		arg.EvseID,
		arg.Uid,
		arg.ConnectorID,
		arg.Standard,
		arg.Format,
		arg.PowerType,
		arg.Voltage,
		arg.Amperage,
		arg.Wattage,
		arg.TariffID,
		arg.TermsAndConditions,
		arg.LastUpdated,
	)
	var i Connector
	err := row.Scan(
		&i.ID,
		&i.EvseID,
		&i.Uid,
		&i.ConnectorID,
		&i.Standard,
		&i.Format,
		&i.PowerType,
		&i.Voltage,
		&i.Amperage,
		&i.Wattage,
		&i.TariffID,
		&i.TermsAndConditions,
		&i.LastUpdated,
	)
	return i, err
}
