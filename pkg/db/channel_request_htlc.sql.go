// Code generated by sqlc. DO NOT EDIT.
// source: channel_request_htlc.sql

package db

import (
	"context"
)

const createChannelRequestHtlc = `-- name: CreateChannelRequestHtlc :one
INSERT INTO channel_request_htlcs (
    channel_request_id,
    chan_id, 
    htlc_id, 
    is_settled,
    is_failed
  ) VALUES ($1, $2, $3, $4, $5)
  RETURNING id, channel_request_id, chan_id, htlc_id, is_settled, amount_msat, is_failed
`

type CreateChannelRequestHtlcParams struct {
	ChannelRequestID int64 `db:"channel_request_id" json:"channelRequestID"`
	ChanID           int64 `db:"chan_id" json:"chanID"`
	HtlcID           int64 `db:"htlc_id" json:"htlcID"`
	IsSettled        bool  `db:"is_settled" json:"isSettled"`
	IsFailed         bool  `db:"is_failed" json:"isFailed"`
}

func (q *Queries) CreateChannelRequestHtlc(ctx context.Context, arg CreateChannelRequestHtlcParams) (ChannelRequestHtlc, error) {
	row := q.db.QueryRowContext(ctx, createChannelRequestHtlc,
		arg.ChannelRequestID,
		arg.ChanID,
		arg.HtlcID,
		arg.IsSettled,
		arg.IsFailed,
	)
	var i ChannelRequestHtlc
	err := row.Scan(
		&i.ID,
		&i.ChannelRequestID,
		&i.ChanID,
		&i.HtlcID,
		&i.IsSettled,
		&i.AmountMsat,
		&i.IsFailed,
	)
	return i, err
}

const getChannelRequestHtlc = `-- name: GetChannelRequestHtlc :one
SELECT id, channel_request_id, chan_id, htlc_id, is_settled, amount_msat, is_failed FROM channel_request_htlcs
  WHERE channel_request_id = $1
`

func (q *Queries) GetChannelRequestHtlc(ctx context.Context, channelRequestID int64) (ChannelRequestHtlc, error) {
	row := q.db.QueryRowContext(ctx, getChannelRequestHtlc, channelRequestID)
	var i ChannelRequestHtlc
	err := row.Scan(
		&i.ID,
		&i.ChannelRequestID,
		&i.ChanID,
		&i.HtlcID,
		&i.IsSettled,
		&i.AmountMsat,
		&i.IsFailed,
	)
	return i, err
}

const getChannelRequestHtlcByCircuitKey = `-- name: GetChannelRequestHtlcByCircuitKey :one
SELECT id, channel_request_id, chan_id, htlc_id, is_settled, amount_msat, is_failed FROM channel_request_htlcs
  WHERE chan_id = $1 AND htlc_id = $2
`

type GetChannelRequestHtlcByCircuitKeyParams struct {
	ChanID int64 `db:"chan_id" json:"chanID"`
	HtlcID int64 `db:"htlc_id" json:"htlcID"`
}

func (q *Queries) GetChannelRequestHtlcByCircuitKey(ctx context.Context, arg GetChannelRequestHtlcByCircuitKeyParams) (ChannelRequestHtlc, error) {
	row := q.db.QueryRowContext(ctx, getChannelRequestHtlcByCircuitKey, arg.ChanID, arg.HtlcID)
	var i ChannelRequestHtlc
	err := row.Scan(
		&i.ID,
		&i.ChannelRequestID,
		&i.ChanID,
		&i.HtlcID,
		&i.IsSettled,
		&i.AmountMsat,
		&i.IsFailed,
	)
	return i, err
}

const listChannelRequestHtlcs = `-- name: ListChannelRequestHtlcs :many
SELECT id, channel_request_id, chan_id, htlc_id, is_settled, amount_msat, is_failed FROM channel_request_htlcs
  WHERE channel_request_id = $1
  ORDER BY id
`

func (q *Queries) ListChannelRequestHtlcs(ctx context.Context, channelRequestID int64) ([]ChannelRequestHtlc, error) {
	rows, err := q.db.QueryContext(ctx, listChannelRequestHtlcs, channelRequestID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChannelRequestHtlc
	for rows.Next() {
		var i ChannelRequestHtlc
		if err := rows.Scan(
			&i.ID,
			&i.ChannelRequestID,
			&i.ChanID,
			&i.HtlcID,
			&i.IsSettled,
			&i.AmountMsat,
			&i.IsFailed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChannelRequestHtlcByCircuitKey = `-- name: UpdateChannelRequestHtlcByCircuitKey :one
UPDATE channel_request_htlcs SET (
    is_settled, 
    is_failed
  ) = ($3, $4)
  WHERE chan_id = $1 AND htlc_id = $2
  RETURNING id, channel_request_id, chan_id, htlc_id, is_settled, amount_msat, is_failed
`

type UpdateChannelRequestHtlcByCircuitKeyParams struct {
	ChanID    int64 `db:"chan_id" json:"chanID"`
	HtlcID    int64 `db:"htlc_id" json:"htlcID"`
	IsSettled bool  `db:"is_settled" json:"isSettled"`
	IsFailed  bool  `db:"is_failed" json:"isFailed"`
}

func (q *Queries) UpdateChannelRequestHtlcByCircuitKey(ctx context.Context, arg UpdateChannelRequestHtlcByCircuitKeyParams) (ChannelRequestHtlc, error) {
	row := q.db.QueryRowContext(ctx, updateChannelRequestHtlcByCircuitKey,
		arg.ChanID,
		arg.HtlcID,
		arg.IsSettled,
		arg.IsFailed,
	)
	var i ChannelRequestHtlc
	err := row.Scan(
		&i.ID,
		&i.ChannelRequestID,
		&i.ChanID,
		&i.HtlcID,
		&i.IsSettled,
		&i.AmountMsat,
		&i.IsFailed,
	)
	return i, err
}
