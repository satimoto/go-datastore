// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: regular_hour.sql

package db

import (
	"context"
)

const createRegularHour = `-- name: CreateRegularHour :one
INSERT INTO regular_hours (
    opening_time_id, 
    weekday, 
    period_begin, 
    period_end
  ) VALUES ($1, $2, $3, $4)
  RETURNING id, opening_time_id, weekday, period_begin, period_end
`

type CreateRegularHourParams struct {
	OpeningTimeID int64  `db:"opening_time_id" json:"openingTimeID"`
	Weekday       int16  `db:"weekday" json:"weekday"`
	PeriodBegin   string `db:"period_begin" json:"periodBegin"`
	PeriodEnd     string `db:"period_end" json:"periodEnd"`
}

func (q *Queries) CreateRegularHour(ctx context.Context, arg CreateRegularHourParams) (RegularHour, error) {
	row := q.db.QueryRowContext(ctx, createRegularHour,
		arg.OpeningTimeID,
		arg.Weekday,
		arg.PeriodBegin,
		arg.PeriodEnd,
	)
	var i RegularHour
	err := row.Scan(
		&i.ID,
		&i.OpeningTimeID,
		&i.Weekday,
		&i.PeriodBegin,
		&i.PeriodEnd,
	)
	return i, err
}

const deleteRegularHours = `-- name: DeleteRegularHours :exec
DELETE FROM regular_hours
  WHERE opening_time_id = $1
`

func (q *Queries) DeleteRegularHours(ctx context.Context, openingTimeID int64) error {
	_, err := q.db.ExecContext(ctx, deleteRegularHours, openingTimeID)
	return err
}

const listRegularHours = `-- name: ListRegularHours :many
SELECT id, opening_time_id, weekday, period_begin, period_end FROM regular_hours
  WHERE opening_time_id = $1
  ORDER BY id
`

func (q *Queries) ListRegularHours(ctx context.Context, openingTimeID int64) ([]RegularHour, error) {
	rows, err := q.db.QueryContext(ctx, listRegularHours, openingTimeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RegularHour
	for rows.Next() {
		var i RegularHour
		if err := rows.Scan(
			&i.ID,
			&i.OpeningTimeID,
			&i.Weekday,
			&i.PeriodBegin,
			&i.PeriodEnd,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
