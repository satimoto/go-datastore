// Code generated by sqlc. DO NOT EDIT.
// source: evse_capability.sql

package db

import (
	"context"
)

const listEvseCapabilities = `-- name: ListEvseCapabilities :many
SELECT ca.id, ca.text, ca.description FROM capabilities ca
  INNER JOIN evse_capabilities ec ON ec.capability_id == ca.id
  WHERE ec.evse_id == $1
  ORDER BY ca.id
`

func (q *Queries) ListEvseCapabilities(ctx context.Context, evseID int64) ([]Capability, error) {
	rows, err := q.db.QueryContext(ctx, listEvseCapabilities, evseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Capability
	for rows.Next() {
		var i Capability
		if err := rows.Scan(&i.ID, &i.Text, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setEvseCapability = `-- name: SetEvseCapability :exec
INSERT INTO evse_capabilities (evse_id, capability_id)
  VALUES ($1, $2)
`

type SetEvseCapabilityParams struct {
	EvseID       int64 `db:"evse_id" json:"evseID"`
	CapabilityID int64 `db:"capability_id" json:"capabilityID"`
}

func (q *Queries) SetEvseCapability(ctx context.Context, arg SetEvseCapabilityParams) error {
	_, err := q.db.ExecContext(ctx, setEvseCapability, arg.EvseID, arg.CapabilityID)
	return err
}

const unsetEvseCapabilities = `-- name: UnsetEvseCapabilities :exec
DELETE FROM evse_capabilities ec
  WHERE ec.evse_id == $1
`

func (q *Queries) UnsetEvseCapabilities(ctx context.Context, evseID int64) error {
	_, err := q.db.ExecContext(ctx, unsetEvseCapabilities, evseID)
	return err
}
