// Code generated by sqlc. DO NOT EDIT.
// source: energy_source.sql

package db

import (
	"context"
)

const createEnergySource = `-- name: CreateEnergySource :one
INSERT INTO energy_sources (
    energy_mix_id, 
    source, 
    percentage
  ) VALUES ($1, $2, $3)
  RETURNING id, energy_mix_id, source, percentage
`

type CreateEnergySourceParams struct {
	EnergyMixID int64                `db:"energy_mix_id" json:"energyMixID"`
	Source      EnergySourceCategory `db:"source" json:"source"`
	Percentage  string               `db:"percentage" json:"percentage"`
}

func (q *Queries) CreateEnergySource(ctx context.Context, arg CreateEnergySourceParams) (EnergySource, error) {
	row := q.db.QueryRowContext(ctx, createEnergySource, arg.EnergyMixID, arg.Source, arg.Percentage)
	var i EnergySource
	err := row.Scan(
		&i.ID,
		&i.EnergyMixID,
		&i.Source,
		&i.Percentage,
	)
	return i, err
}

const deleteEnergySources = `-- name: DeleteEnergySources :exec
DELETE FROM energy_sources
  WHERE energy_mix_id = $1
`

func (q *Queries) DeleteEnergySources(ctx context.Context, energyMixID int64) error {
	_, err := q.db.ExecContext(ctx, deleteEnergySources, energyMixID)
	return err
}

const listEnergySources = `-- name: ListEnergySources :many
SELECT id, energy_mix_id, source, percentage FROM energy_sources
  WHERE energy_mix_id = $1
  ORDER BY id
`

func (q *Queries) ListEnergySources(ctx context.Context, energyMixID int64) ([]EnergySource, error) {
	rows, err := q.db.QueryContext(ctx, listEnergySources, energyMixID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EnergySource
	for rows.Next() {
		var i EnergySource
		if err := rows.Scan(
			&i.ID,
			&i.EnergyMixID,
			&i.Source,
			&i.Percentage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
