// Code generated by sqlc. DO NOT EDIT.
// source: cdr.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createCdr = `-- name: CreateCdr :one
INSERT INTO cdrs (
    uid,
    country_code, 
    party_id, 
    authorization_id,
    start_date_time,
    stop_date_time,
    auth_id,
    auth_method,
    location_id,
    meter_id,
    currency,
    calibration_id,
    total_cost,
    total_energy,
    total_time,
    total_parking_time,
    remark,
    last_updated
  ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18)
  RETURNING id, uid, country_code, party_id, authorization_id, start_date_time, stop_date_time, auth_id, auth_method, location_id, meter_id, currency, calibration_id, total_cost, total_energy, total_time, total_parking_time, remark, last_updated
`

type CreateCdrParams struct {
	Uid              string          `db:"uid" json:"uid"`
	CountryCode      sql.NullString  `db:"country_code" json:"countryCode"`
	PartyID          sql.NullString  `db:"party_id" json:"partyID"`
	AuthorizationID  sql.NullString  `db:"authorization_id" json:"authorizationID"`
	StartDateTime    time.Time       `db:"start_date_time" json:"startDateTime"`
	StopDateTime     sql.NullTime    `db:"stop_date_time" json:"stopDateTime"`
	AuthID           string          `db:"auth_id" json:"authID"`
	AuthMethod       AuthMethodType  `db:"auth_method" json:"authMethod"`
	LocationID       int64           `db:"location_id" json:"locationID"`
	MeterID          sql.NullString  `db:"meter_id" json:"meterID"`
	Currency         string          `db:"currency" json:"currency"`
	CalibrationID    sql.NullInt64   `db:"calibration_id" json:"calibrationID"`
	TotalCost        float64         `db:"total_cost" json:"totalCost"`
	TotalEnergy      float64         `db:"total_energy" json:"totalEnergy"`
	TotalTime        float64         `db:"total_time" json:"totalTime"`
	TotalParkingTime sql.NullFloat64 `db:"total_parking_time" json:"totalParkingTime"`
	Remark           sql.NullString  `db:"remark" json:"remark"`
	LastUpdated      time.Time       `db:"last_updated" json:"lastUpdated"`
}

func (q *Queries) CreateCdr(ctx context.Context, arg CreateCdrParams) (Cdr, error) {
	row := q.db.QueryRowContext(ctx, createCdr,
		arg.Uid,
		arg.CountryCode,
		arg.PartyID,
		arg.AuthorizationID,
		arg.StartDateTime,
		arg.StopDateTime,
		arg.AuthID,
		arg.AuthMethod,
		arg.LocationID,
		arg.MeterID,
		arg.Currency,
		arg.CalibrationID,
		arg.TotalCost,
		arg.TotalEnergy,
		arg.TotalTime,
		arg.TotalParkingTime,
		arg.Remark,
		arg.LastUpdated,
	)
	var i Cdr
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.CountryCode,
		&i.PartyID,
		&i.AuthorizationID,
		&i.StartDateTime,
		&i.StopDateTime,
		&i.AuthID,
		&i.AuthMethod,
		&i.LocationID,
		&i.MeterID,
		&i.Currency,
		&i.CalibrationID,
		&i.TotalCost,
		&i.TotalEnergy,
		&i.TotalTime,
		&i.TotalParkingTime,
		&i.Remark,
		&i.LastUpdated,
	)
	return i, err
}

const getCdrByUid = `-- name: GetCdrByUid :one
SELECT id, uid, country_code, party_id, authorization_id, start_date_time, stop_date_time, auth_id, auth_method, location_id, meter_id, currency, calibration_id, total_cost, total_energy, total_time, total_parking_time, remark, last_updated FROM cdrs
  WHERE uid = $1
`

func (q *Queries) GetCdrByUid(ctx context.Context, uid string) (Cdr, error) {
	row := q.db.QueryRowContext(ctx, getCdrByUid, uid)
	var i Cdr
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.CountryCode,
		&i.PartyID,
		&i.AuthorizationID,
		&i.StartDateTime,
		&i.StopDateTime,
		&i.AuthID,
		&i.AuthMethod,
		&i.LocationID,
		&i.MeterID,
		&i.Currency,
		&i.CalibrationID,
		&i.TotalCost,
		&i.TotalEnergy,
		&i.TotalTime,
		&i.TotalParkingTime,
		&i.Remark,
		&i.LastUpdated,
	)
	return i, err
}
