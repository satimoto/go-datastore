// Code generated by sqlc. DO NOT EDIT.
// source: channel_request_htlc.sql

package db

import (
	"context"
)

const createChannelRequestHtlc = `-- name: CreateChannelRequestHtlc :one
INSERT INTO channel_request_htlcs (
    channel_request_id,
    chan_id, 
    htlc_id, 
    is_settled
  ) VALUES ($1, $2, $3, $4)
  RETURNING id, channel_request_id, chan_id, htlc_id, is_settled
`

type CreateChannelRequestHtlcParams struct {
	ChannelRequestID int64 `db:"channel_request_id" json:"channelRequestID"`
	ChanID           int64 `db:"chan_id" json:"chanID"`
	HtlcID           int64 `db:"htlc_id" json:"htlcID"`
	IsSettled        bool  `db:"is_settled" json:"isSettled"`
}

func (q *Queries) CreateChannelRequestHtlc(ctx context.Context, arg CreateChannelRequestHtlcParams) (ChannelRequestHtlc, error) {
	row := q.db.QueryRowContext(ctx, createChannelRequestHtlc,
		arg.ChannelRequestID,
		arg.ChanID,
		arg.HtlcID,
		arg.IsSettled,
	)
	var i ChannelRequestHtlc
	err := row.Scan(
		&i.ID,
		&i.ChannelRequestID,
		&i.ChanID,
		&i.HtlcID,
		&i.IsSettled,
	)
	return i, err
}

const getChannelRequestHtlc = `-- name: GetChannelRequestHtlc :one
SELECT id, channel_request_id, chan_id, htlc_id, is_settled FROM channel_request_htlcs
  WHERE channel_request_id = $1
`

func (q *Queries) GetChannelRequestHtlc(ctx context.Context, channelRequestID int64) (ChannelRequestHtlc, error) {
	row := q.db.QueryRowContext(ctx, getChannelRequestHtlc, channelRequestID)
	var i ChannelRequestHtlc
	err := row.Scan(
		&i.ID,
		&i.ChannelRequestID,
		&i.ChanID,
		&i.HtlcID,
		&i.IsSettled,
	)
	return i, err
}

const getChannelRequestHtlcByCircuitKey = `-- name: GetChannelRequestHtlcByCircuitKey :one
SELECT id, channel_request_id, chan_id, htlc_id, is_settled FROM channel_request_htlcs
  WHERE chan_id = $1 AND htlc_id = $2
`

type GetChannelRequestHtlcByCircuitKeyParams struct {
	ChanID int64 `db:"chan_id" json:"chanID"`
	HtlcID int64 `db:"htlc_id" json:"htlcID"`
}

func (q *Queries) GetChannelRequestHtlcByCircuitKey(ctx context.Context, arg GetChannelRequestHtlcByCircuitKeyParams) (ChannelRequestHtlc, error) {
	row := q.db.QueryRowContext(ctx, getChannelRequestHtlcByCircuitKey, arg.ChanID, arg.HtlcID)
	var i ChannelRequestHtlc
	err := row.Scan(
		&i.ID,
		&i.ChannelRequestID,
		&i.ChanID,
		&i.HtlcID,
		&i.IsSettled,
	)
	return i, err
}

const updateChannelRequestHtlc = `-- name: UpdateChannelRequestHtlc :one
UPDATE channel_request_htlcs SET 
    is_settled = $2
  WHERE id = $1
  RETURNING id, channel_request_id, chan_id, htlc_id, is_settled
`

type UpdateChannelRequestHtlcParams struct {
	ID        int64 `db:"id" json:"id"`
	IsSettled bool  `db:"is_settled" json:"isSettled"`
}

func (q *Queries) UpdateChannelRequestHtlc(ctx context.Context, arg UpdateChannelRequestHtlcParams) (ChannelRequestHtlc, error) {
	row := q.db.QueryRowContext(ctx, updateChannelRequestHtlc, arg.ID, arg.IsSettled)
	var i ChannelRequestHtlc
	err := row.Scan(
		&i.ID,
		&i.ChannelRequestID,
		&i.ChanID,
		&i.HtlcID,
		&i.IsSettled,
	)
	return i, err
}
