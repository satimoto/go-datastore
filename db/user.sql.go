// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    linking_pubkey,
    node_pubkey,
    device_token
  ) VALUES ($1, $2, $3)
  RETURNING id, linking_pubkey, node_pubkey, device_token
`

type CreateUserParams struct {
	LinkingPubkey string `db:"linking_pubkey" json:"linkingPubkey"`
	NodePubkey    string `db:"node_pubkey" json:"nodePubkey"`
	DeviceToken   string `db:"device_token" json:"deviceToken"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.LinkingPubkey, arg.NodePubkey, arg.DeviceToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.LinkingPubkey,
		&i.NodePubkey,
		&i.DeviceToken,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, linking_pubkey, node_pubkey, device_token FROM users
  WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.LinkingPubkey,
		&i.NodePubkey,
		&i.DeviceToken,
	)
	return i, err
}

const getUserByLinkingPubkey = `-- name: GetUserByLinkingPubkey :one
SELECT id, linking_pubkey, node_pubkey, device_token FROM users
  WHERE linking_pubkey = $1
`

func (q *Queries) GetUserByLinkingPubkey(ctx context.Context, linkingPubkey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByLinkingPubkey, linkingPubkey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.LinkingPubkey,
		&i.NodePubkey,
		&i.DeviceToken,
	)
	return i, err
}

const getUserByNodePubkey = `-- name: GetUserByNodePubkey :one
SELECT id, linking_pubkey, node_pubkey, device_token FROM users
  WHERE node_pubkey = $1
`

func (q *Queries) GetUserByNodePubkey(ctx context.Context, nodePubkey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByNodePubkey, nodePubkey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.LinkingPubkey,
		&i.NodePubkey,
		&i.DeviceToken,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET device_token = $2
  WHERE id = $1
  RETURNING id, linking_pubkey, node_pubkey, device_token
`

type UpdateUserParams struct {
	ID          int64  `db:"id" json:"id"`
	DeviceToken string `db:"device_token" json:"deviceToken"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.DeviceToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.LinkingPubkey,
		&i.NodePubkey,
		&i.DeviceToken,
	)
	return i, err
}
