// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    linking_key,
    node_key,
    node_address,
    device_token
  ) VALUES ($1, $2, $3, $4)
  RETURNING id, linking_key, node_key, node_address, device_token
`

type CreateUserParams struct {
	LinkingKey  string `db:"linking_key" json:"linkingKey"`
	NodeKey     string `db:"node_key" json:"nodeKey"`
	NodeAddress string `db:"node_address" json:"nodeAddress"`
	DeviceToken string `db:"device_token" json:"deviceToken"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.LinkingKey,
		arg.NodeKey,
		arg.NodeAddress,
		arg.DeviceToken,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.LinkingKey,
		&i.NodeKey,
		&i.NodeAddress,
		&i.DeviceToken,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, linking_key, node_key, node_address, device_token FROM users
  WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.LinkingKey,
		&i.NodeKey,
		&i.NodeAddress,
		&i.DeviceToken,
	)
	return i, err
}

const getUserByLinkingKey = `-- name: GetUserByLinkingKey :one
SELECT id, linking_key, node_key, node_address, device_token FROM users
  WHERE linking_key = $1
`

func (q *Queries) GetUserByLinkingKey(ctx context.Context, linkingKey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByLinkingKey, linkingKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.LinkingKey,
		&i.NodeKey,
		&i.NodeAddress,
		&i.DeviceToken,
	)
	return i, err
}

const getUserByNodeKey = `-- name: GetUserByNodeKey :one
SELECT id, linking_key, node_key, node_address, device_token FROM users
  WHERE node_key = $1
`

func (q *Queries) GetUserByNodeKey(ctx context.Context, nodeKey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByNodeKey, nodeKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.LinkingKey,
		&i.NodeKey,
		&i.NodeAddress,
		&i.DeviceToken,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET (
    node_address,
    device_token
  ) = ($2, $3)
  WHERE id = $1
  RETURNING id, linking_key, node_key, node_address, device_token
`

type UpdateUserParams struct {
	ID          int64  `db:"id" json:"id"`
	NodeAddress string `db:"node_address" json:"nodeAddress"`
	DeviceToken string `db:"device_token" json:"deviceToken"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.NodeAddress, arg.DeviceToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.LinkingKey,
		&i.NodeKey,
		&i.NodeAddress,
		&i.DeviceToken,
	)
	return i, err
}
