// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    commission_percent,
    device_token,
    linking_pubkey,
    node_id,
    pubkey,
    referrer_id
  ) VALUES ($1, $2, $3, $4, $5, $6)
  RETURNING id, linking_pubkey, pubkey, device_token, node_id, commission_percent, is_admin, is_restricted, referrer_id
`

type CreateUserParams struct {
	CommissionPercent float64       `db:"commission_percent" json:"commissionPercent"`
	DeviceToken       string        `db:"device_token" json:"deviceToken"`
	LinkingPubkey     string        `db:"linking_pubkey" json:"linkingPubkey"`
	NodeID            sql.NullInt64 `db:"node_id" json:"nodeID"`
	Pubkey            string        `db:"pubkey" json:"pubkey"`
	ReferrerID        sql.NullInt64 `db:"referrer_id" json:"referrerID"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.CommissionPercent,
		arg.DeviceToken,
		arg.LinkingPubkey,
		arg.NodeID,
		arg.Pubkey,
		arg.ReferrerID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.LinkingPubkey,
		&i.Pubkey,
		&i.DeviceToken,
		&i.NodeID,
		&i.CommissionPercent,
		&i.IsAdmin,
		&i.IsRestricted,
		&i.ReferrerID,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, linking_pubkey, pubkey, device_token, node_id, commission_percent, is_admin, is_restricted, referrer_id FROM users
  WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.LinkingPubkey,
		&i.Pubkey,
		&i.DeviceToken,
		&i.NodeID,
		&i.CommissionPercent,
		&i.IsAdmin,
		&i.IsRestricted,
		&i.ReferrerID,
	)
	return i, err
}

const getUserByDeviceToken = `-- name: GetUserByDeviceToken :one
SELECT id, linking_pubkey, pubkey, device_token, node_id, commission_percent, is_admin, is_restricted, referrer_id FROM users
  WHERE device_token = $1
`

func (q *Queries) GetUserByDeviceToken(ctx context.Context, deviceToken string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByDeviceToken, deviceToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.LinkingPubkey,
		&i.Pubkey,
		&i.DeviceToken,
		&i.NodeID,
		&i.CommissionPercent,
		&i.IsAdmin,
		&i.IsRestricted,
		&i.ReferrerID,
	)
	return i, err
}

const getUserByLinkingPubkey = `-- name: GetUserByLinkingPubkey :one
SELECT id, linking_pubkey, pubkey, device_token, node_id, commission_percent, is_admin, is_restricted, referrer_id FROM users
  WHERE linking_pubkey = $1
`

func (q *Queries) GetUserByLinkingPubkey(ctx context.Context, linkingPubkey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByLinkingPubkey, linkingPubkey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.LinkingPubkey,
		&i.Pubkey,
		&i.DeviceToken,
		&i.NodeID,
		&i.CommissionPercent,
		&i.IsAdmin,
		&i.IsRestricted,
		&i.ReferrerID,
	)
	return i, err
}

const getUserByPubkey = `-- name: GetUserByPubkey :one
SELECT id, linking_pubkey, pubkey, device_token, node_id, commission_percent, is_admin, is_restricted, referrer_id FROM users
  WHERE pubkey = $1
`

func (q *Queries) GetUserByPubkey(ctx context.Context, pubkey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPubkey, pubkey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.LinkingPubkey,
		&i.Pubkey,
		&i.DeviceToken,
		&i.NodeID,
		&i.CommissionPercent,
		&i.IsAdmin,
		&i.IsRestricted,
		&i.ReferrerID,
	)
	return i, err
}

const getUserBySessionID = `-- name: GetUserBySessionID :one
SELECT u.id, u.linking_pubkey, u.pubkey, u.device_token, u.node_id, u.commission_percent, u.is_admin, u.is_restricted, u.referrer_id FROM users u
  INNER JOIN sessions s ON s.user_id = u.id
  WHERE s.id = $1
`

func (q *Queries) GetUserBySessionID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserBySessionID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.LinkingPubkey,
		&i.Pubkey,
		&i.DeviceToken,
		&i.NodeID,
		&i.CommissionPercent,
		&i.IsAdmin,
		&i.IsRestricted,
		&i.ReferrerID,
	)
	return i, err
}

const getUserByTokenID = `-- name: GetUserByTokenID :one
SELECT u.id, u.linking_pubkey, u.pubkey, u.device_token, u.node_id, u.commission_percent, u.is_admin, u.is_restricted, u.referrer_id FROM users u
  INNER JOIN tokens t ON t.user_id = u.id
  WHERE t.id = $1
`

func (q *Queries) GetUserByTokenID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByTokenID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.LinkingPubkey,
		&i.Pubkey,
		&i.DeviceToken,
		&i.NodeID,
		&i.CommissionPercent,
		&i.IsAdmin,
		&i.IsRestricted,
		&i.ReferrerID,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET (
    commission_percent,
    device_token,
    linking_pubkey,
    node_id,
    pubkey,
    is_restricted,
    referrer_id
  ) = ($2, $3, $4, $5, $6, $7, $8)
  WHERE id = $1
  RETURNING id, linking_pubkey, pubkey, device_token, node_id, commission_percent, is_admin, is_restricted, referrer_id
`

type UpdateUserParams struct {
	ID                int64         `db:"id" json:"id"`
	CommissionPercent float64       `db:"commission_percent" json:"commissionPercent"`
	DeviceToken       string        `db:"device_token" json:"deviceToken"`
	LinkingPubkey     string        `db:"linking_pubkey" json:"linkingPubkey"`
	NodeID            sql.NullInt64 `db:"node_id" json:"nodeID"`
	Pubkey            string        `db:"pubkey" json:"pubkey"`
	IsRestricted      bool          `db:"is_restricted" json:"isRestricted"`
	ReferrerID        sql.NullInt64 `db:"referrer_id" json:"referrerID"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.CommissionPercent,
		arg.DeviceToken,
		arg.LinkingPubkey,
		arg.NodeID,
		arg.Pubkey,
		arg.IsRestricted,
		arg.ReferrerID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.LinkingPubkey,
		&i.Pubkey,
		&i.DeviceToken,
		&i.NodeID,
		&i.CommissionPercent,
		&i.IsAdmin,
		&i.IsRestricted,
		&i.ReferrerID,
	)
	return i, err
}
