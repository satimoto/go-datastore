// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (device_token, node_id)
  VALUES ($1, $2)
  RETURNING id, device_token, node_id
`

type CreateUserParams struct {
	DeviceToken string `db:"device_token" json:"deviceToken"`
	NodeID      int64  `db:"node_id" json:"nodeID"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.DeviceToken, arg.NodeID)
	var i User
	err := row.Scan(&i.ID, &i.DeviceToken, &i.NodeID)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
  WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, device_token, node_id FROM users
  WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.DeviceToken, &i.NodeID)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, device_token, node_id FROM users
  ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.DeviceToken, &i.NodeID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
  SET device_token = $2
  WHERE id = $1
  RETURNING id, device_token, node_id
`

type UpdateUserParams struct {
	ID          int64  `db:"id" json:"id"`
	DeviceToken string `db:"device_token" json:"deviceToken"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.DeviceToken)
	var i User
	err := row.Scan(&i.ID, &i.DeviceToken, &i.NodeID)
	return i, err
}
