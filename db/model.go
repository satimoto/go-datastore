// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"database/sql"
	"fmt"
	"time"
)

type AuthenticationActions string

const (
	AuthenticationActionsRegister AuthenticationActions = "register"
	AuthenticationActionsLogin    AuthenticationActions = "login"
	AuthenticationActionsLink     AuthenticationActions = "link"
	AuthenticationActionsAuth     AuthenticationActions = "auth"
)

func (e *AuthenticationActions) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AuthenticationActions(s)
	case string:
		*e = AuthenticationActions(s)
	default:
		return fmt.Errorf("unsupported scan type for AuthenticationActions: %T", src)
	}
	return nil
}

type Authentication struct {
	ID         int64                 `db:"id" json:"id"`
	Code       string                `db:"code" json:"code"`
	Action     AuthenticationActions `db:"action" json:"action"`
	Challenge  string                `db:"challenge" json:"challenge"`
	Signature  sql.NullString        `db:"signature" json:"signature"`
	LinkingKey sql.NullString        `db:"linking_key" json:"linkingKey"`
}

}

type EmailSubscription struct {
	ID               int64     `db:"id" json:"id"`
	Email            string    `db:"email" json:"email"`
	VerificationCode string    `db:"verification_code" json:"verificationCode"`
	UnsubscribeCode  string    `db:"unsubscribe_code" json:"unsubscribeCode"`
	Locale           string    `db:"locale" json:"locale"`
	IsVerified       bool      `db:"is_verified" json:"isVerified"`
	CreatedDate      time.Time `db:"created_date" json:"createdDate"`
}

type User struct {
	ID          int64  `db:"id" json:"id"`
	LinkingKey  string `db:"linking_key" json:"linkingKey"`
	NodeKey     string `db:"node_key" json:"nodeKey"`
	NodeAddress string `db:"node_address" json:"nodeAddress"`
	DeviceToken string `db:"device_token" json:"deviceToken"`
}
