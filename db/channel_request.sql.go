// Code generated by sqlc. DO NOT EDIT.
// source: channel_request.sql

package db

import (
	"context"
	"database/sql"
)

const createChannelRequest = `-- name: CreateChannelRequest :one
INSERT INTO channel_requests (
    pubkey, 
    payment_hash, 
    payment_addr,
    amount_msat
  ) VALUES ($1, $2, $3, $4)
  RETURNING id, pubkey, payment_hash, payment_addr, amount_msat, funding_tx_id, output_index
`

type CreateChannelRequestParams struct {
	Pubkey      []byte `db:"pubkey" json:"pubkey"`
	PaymentHash []byte `db:"payment_hash" json:"paymentHash"`
	PaymentAddr []byte `db:"payment_addr" json:"paymentAddr"`
	AmountMsat  int64  `db:"amount_msat" json:"amountMsat"`
}

func (q *Queries) CreateChannelRequest(ctx context.Context, arg CreateChannelRequestParams) (ChannelRequest, error) {
	row := q.db.QueryRowContext(ctx, createChannelRequest,
		arg.Pubkey,
		arg.PaymentHash,
		arg.PaymentAddr,
		arg.AmountMsat,
	)
	var i ChannelRequest
	err := row.Scan(
		&i.ID,
		&i.Pubkey,
		&i.PaymentHash,
		&i.PaymentAddr,
		&i.AmountMsat,
		&i.FundingTxID,
		&i.OutputIndex,
	)
	return i, err
}

const deleteChannelRequest = `-- name: DeleteChannelRequest :exec
DELETE FROM channel_requests
  WHERE id = $1
`

func (q *Queries) DeleteChannelRequest(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteChannelRequest, id)
	return err
}

const getChannelRequest = `-- name: GetChannelRequest :one
SELECT id, pubkey, payment_hash, payment_addr, amount_msat, funding_tx_id, output_index FROM channel_requests
  WHERE id = $1
`

func (q *Queries) GetChannelRequest(ctx context.Context, id int64) (ChannelRequest, error) {
	row := q.db.QueryRowContext(ctx, getChannelRequest, id)
	var i ChannelRequest
	err := row.Scan(
		&i.ID,
		&i.Pubkey,
		&i.PaymentHash,
		&i.PaymentAddr,
		&i.AmountMsat,
		&i.FundingTxID,
		&i.OutputIndex,
	)
	return i, err
}

const getChannelRequestByPaymentHash = `-- name: GetChannelRequestByPaymentHash :one
SELECT id, pubkey, payment_hash, payment_addr, amount_msat, funding_tx_id, output_index FROM channel_requests
  WHERE payment_hash = $1 OR sha256('probing-01:' || payment_hash) = $1
`

func (q *Queries) GetChannelRequestByPaymentHash(ctx context.Context, paymentHash []byte) (ChannelRequest, error) {
	row := q.db.QueryRowContext(ctx, getChannelRequestByPaymentHash, paymentHash)
	var i ChannelRequest
	err := row.Scan(
		&i.ID,
		&i.Pubkey,
		&i.PaymentHash,
		&i.PaymentAddr,
		&i.AmountMsat,
		&i.FundingTxID,
		&i.OutputIndex,
	)
	return i, err
}

const updateChannelRequest = `-- name: UpdateChannelRequest :one
UPDATE channel_requests SET (
    funding_tx_id, 
    output_index
  ) = ($2, $3)
  WHERE id = $1
  RETURNING id, pubkey, payment_hash, payment_addr, amount_msat, funding_tx_id, output_index
`

type UpdateChannelRequestParams struct {
	ID          int64         `db:"id" json:"id"`
	FundingTxID []byte        `db:"funding_tx_id" json:"fundingTxID"`
	OutputIndex sql.NullInt64 `db:"output_index" json:"outputIndex"`
}

func (q *Queries) UpdateChannelRequest(ctx context.Context, arg UpdateChannelRequestParams) (ChannelRequest, error) {
	row := q.db.QueryRowContext(ctx, updateChannelRequest, arg.ID, arg.FundingTxID, arg.OutputIndex)
	var i ChannelRequest
	err := row.Scan(
		&i.ID,
		&i.Pubkey,
		&i.PaymentHash,
		&i.PaymentAddr,
		&i.AmountMsat,
		&i.FundingTxID,
		&i.OutputIndex,
	)
	return i, err
}
