// Code generated by sqlc. DO NOT EDIT.
// source: session_charging_period.sql

package db

import (
	"context"
)

const deleteSessionChargingPeriods = `-- name: DeleteSessionChargingPeriods :exec
DELETE FROM charging_periods cp
  USING session_charging_periods scp
  WHERE scp.charging_period_id = cp.id AND scp.session_id = $1
`

func (q *Queries) DeleteSessionChargingPeriods(ctx context.Context, sessionID int64) error {
	_, err := q.db.ExecContext(ctx, deleteSessionChargingPeriods, sessionID)
	return err
}

const listSessionChargingPeriods = `-- name: ListSessionChargingPeriods :many
SELECT cp.id, cp.start_date_time FROM charging_periods cp
  INNER JOIN session_charging_periods scp ON scp.charging_period_id = cp.id
  WHERE scp.session_id = $1
  ORDER BY cp.id
`

func (q *Queries) ListSessionChargingPeriods(ctx context.Context, sessionID int64) ([]ChargingPeriod, error) {
	rows, err := q.db.QueryContext(ctx, listSessionChargingPeriods, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChargingPeriod
	for rows.Next() {
		var i ChargingPeriod
		if err := rows.Scan(&i.ID, &i.StartDateTime); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setSessionChargingPeriod = `-- name: SetSessionChargingPeriod :exec
INSERT INTO session_charging_periods (
    session_id, 
    charging_period_id
  ) VALUES ($1, $2)
`

type SetSessionChargingPeriodParams struct {
	SessionID        int64 `db:"session_id" json:"sessionID"`
	ChargingPeriodID int64 `db:"charging_period_id" json:"chargingPeriodID"`
}

func (q *Queries) SetSessionChargingPeriod(ctx context.Context, arg SetSessionChargingPeriodParams) error {
	_, err := q.db.ExecContext(ctx, setSessionChargingPeriod, arg.SessionID, arg.ChargingPeriodID)
	return err
}
