// Code generated by sqlc. DO NOT EDIT.
// source: node.sql

package db

import (
	"context"
)

const createNode = `-- name: CreateNode :one
INSERT INTO nodes (pubkey, address)
  VALUES ($1, $2)
  RETURNING id, pubkey, address
`

type CreateNodeParams struct {
	Pubkey  string `db:"pubkey" json:"pubkey"`
	Address string `db:"address" json:"address"`
}

func (q *Queries) CreateNode(ctx context.Context, arg CreateNodeParams) (Node, error) {
	row := q.db.QueryRowContext(ctx, createNode, arg.Pubkey, arg.Address)
	var i Node
	err := row.Scan(&i.ID, &i.Pubkey, &i.Address)
	return i, err
}

const deleteNode = `-- name: DeleteNode :one
DELETE FROM nodes
  WHERE id = $1
  RETURNING id, pubkey, address
`

func (q *Queries) DeleteNode(ctx context.Context, id int64) (Node, error) {
	row := q.db.QueryRowContext(ctx, deleteNode, id)
	var i Node
	err := row.Scan(&i.ID, &i.Pubkey, &i.Address)
	return i, err
}

const getNode = `-- name: GetNode :one
SELECT id, pubkey, address FROM nodes
  WHERE id = $1
`

func (q *Queries) GetNode(ctx context.Context, id int64) (Node, error) {
	row := q.db.QueryRowContext(ctx, getNode, id)
	var i Node
	err := row.Scan(&i.ID, &i.Pubkey, &i.Address)
	return i, err
}

const listNodes = `-- name: ListNodes :many
SELECT id, pubkey, address FROM nodes
  ORDER BY name
`

func (q *Queries) ListNodes(ctx context.Context) ([]Node, error) {
	rows, err := q.db.QueryContext(ctx, listNodes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Node
	for rows.Next() {
		var i Node
		if err := rows.Scan(&i.ID, &i.Pubkey, &i.Address); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNode = `-- name: UpdateNode :one
UPDATE nodes
  SET pubkey = $2, address = $3
  WHERE id = $1
  RETURNING id, pubkey, address
`

type UpdateNodeParams struct {
	ID      int64  `db:"id" json:"id"`
	Pubkey  string `db:"pubkey" json:"pubkey"`
	Address string `db:"address" json:"address"`
}

func (q *Queries) UpdateNode(ctx context.Context, arg UpdateNodeParams) (Node, error) {
	row := q.db.QueryRowContext(ctx, updateNode, arg.ID, arg.Pubkey, arg.Address)
	var i Node
	err := row.Scan(&i.ID, &i.Pubkey, &i.Address)
	return i, err
}
