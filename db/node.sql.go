// Code generated by sqlc. DO NOT EDIT.
// source: node.sql

package db

import (
	"context"
)

const createNode = `-- name: CreateNode :one
INSERT INTO nodes (
    pubkey,
    addr,
    alias,
    color,
    commit_hash,
    version,
    channels,
    peers
  ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
  RETURNING id, pubkey, addr, alias, color, commit_hash, version, channels, peers
`

type CreateNodeParams struct {
	Pubkey     string `db:"pubkey" json:"pubkey"`
	Addr       string `db:"addr" json:"addr"`
	Alias      string `db:"alias" json:"alias"`
	Color      string `db:"color" json:"color"`
	CommitHash string `db:"commit_hash" json:"commitHash"`
	Version    string `db:"version" json:"version"`
	Channels   int64  `db:"channels" json:"channels"`
	Peers      int64  `db:"peers" json:"peers"`
}

func (q *Queries) CreateNode(ctx context.Context, arg CreateNodeParams) (Node, error) {
	row := q.db.QueryRowContext(ctx, createNode,
		arg.Pubkey,
		arg.Addr,
		arg.Alias,
		arg.Color,
		arg.CommitHash,
		arg.Version,
		arg.Channels,
		arg.Peers,
	)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Pubkey,
		&i.Addr,
		&i.Alias,
		&i.Color,
		&i.CommitHash,
		&i.Version,
		&i.Channels,
		&i.Peers,
	)
	return i, err
}

const getNode = `-- name: GetNode :one
SELECT id, pubkey, addr, alias, color, commit_hash, version, channels, peers FROM nodes
  WHERE id = $1
`

func (q *Queries) GetNode(ctx context.Context, id int64) (Node, error) {
	row := q.db.QueryRowContext(ctx, getNode, id)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Pubkey,
		&i.Addr,
		&i.Alias,
		&i.Color,
		&i.CommitHash,
		&i.Version,
		&i.Channels,
		&i.Peers,
	)
	return i, err
}

const getNodeByPubkey = `-- name: GetNodeByPubkey :one
SELECT id, pubkey, addr, alias, color, commit_hash, version, channels, peers FROM nodes
  WHERE pubkey = $1
`

func (q *Queries) GetNodeByPubkey(ctx context.Context, pubkey string) (Node, error) {
	row := q.db.QueryRowContext(ctx, getNodeByPubkey, pubkey)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Pubkey,
		&i.Addr,
		&i.Alias,
		&i.Color,
		&i.CommitHash,
		&i.Version,
		&i.Channels,
		&i.Peers,
	)
	return i, err
}

const updateNode = `-- name: UpdateNode :one
UPDATE nodes SET (
    addr,
    alias,
    color,
    commit_hash,
    version,
    channels,
    peers
  ) = ($2, $3, $4, $5, $6, $7, $8)
  WHERE id = $1
  RETURNING id, pubkey, addr, alias, color, commit_hash, version, channels, peers
`

type UpdateNodeParams struct {
	ID         int64  `db:"id" json:"id"`
	Addr       string `db:"addr" json:"addr"`
	Alias      string `db:"alias" json:"alias"`
	Color      string `db:"color" json:"color"`
	CommitHash string `db:"commit_hash" json:"commitHash"`
	Version    string `db:"version" json:"version"`
	Channels   int64  `db:"channels" json:"channels"`
	Peers      int64  `db:"peers" json:"peers"`
}

func (q *Queries) UpdateNode(ctx context.Context, arg UpdateNodeParams) (Node, error) {
	row := q.db.QueryRowContext(ctx, updateNode,
		arg.ID,
		arg.Addr,
		arg.Alias,
		arg.Color,
		arg.CommitHash,
		arg.Version,
		arg.Channels,
		arg.Peers,
	)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Pubkey,
		&i.Addr,
		&i.Alias,
		&i.Color,
		&i.CommitHash,
		&i.Version,
		&i.Channels,
		&i.Peers,
	)
	return i, err
}
