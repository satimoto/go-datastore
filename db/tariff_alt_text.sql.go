// Code generated by sqlc. DO NOT EDIT.
// source: tariff_alt_text.sql

package db

import (
	"context"
)

const deleteTariffAltTexts = `-- name: DeleteTariffAltTexts :exec
DELETE FROM display_texts dt
  USING tariff_alt_texts tt
  WHERE tt.display_text_id == dt.id AND tt.tariff_id == $1
`

func (q *Queries) DeleteTariffAltTexts(ctx context.Context, tariffID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTariffAltTexts, tariffID)
	return err
}

const listTariffAltTexts = `-- name: ListTariffAltTexts :many
SELECT dt.id, dt.language, dt.text FROM display_texts dt
  INNER JOIN tariff_alt_texts tt ON tt.display_text_id == dt.id
  WHERE tt.tariff_id == $1
  ORDER BY dt.id
`

func (q *Queries) ListTariffAltTexts(ctx context.Context, tariffID int64) ([]DisplayText, error) {
	rows, err := q.db.QueryContext(ctx, listTariffAltTexts, tariffID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DisplayText
	for rows.Next() {
		var i DisplayText
		if err := rows.Scan(&i.ID, &i.Language, &i.Text); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setTariffAltText = `-- name: SetTariffAltText :exec
INSERT INTO tariff_alt_texts (tariff_id, display_text_id)
  VALUES ($1, $2)
`

type SetTariffAltTextParams struct {
	TariffID      int64 `db:"tariff_id" json:"tariffID"`
	DisplayTextID int64 `db:"display_text_id" json:"displayTextID"`
}

func (q *Queries) SetTariffAltText(ctx context.Context, arg SetTariffAltTextParams) error {
	_, err := q.db.ExecContext(ctx, setTariffAltText, arg.TariffID, arg.DisplayTextID)
	return err
}
