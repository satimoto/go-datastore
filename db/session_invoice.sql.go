// Code generated by sqlc. DO NOT EDIT.
// source: session_invoice.sql

package db

import (
	"context"
	"time"
)

const createSessionInvoice = `-- name: CreateSessionInvoice :one
INSERT INTO session_invoices (
    session_id,
    amount_fiat,
    amount_msat,
    commission_fiat,
    commission_msat,
    tax_fiat,
    tax_msat,
    currency,
    payment_request,
    is_settled,
    is_expired,
    last_updated
  ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
  RETURNING id, session_id, amount_fiat, amount_msat, commission_fiat, commission_msat, tax_fiat, tax_msat, currency, payment_request, is_settled, is_expired, last_updated
`

type CreateSessionInvoiceParams struct {
	SessionID      int64     `db:"session_id" json:"sessionID"`
	AmountFiat     float64   `db:"amount_fiat" json:"amountFiat"`
	AmountMsat     int64     `db:"amount_msat" json:"amountMsat"`
	CommissionFiat float64   `db:"commission_fiat" json:"commissionFiat"`
	CommissionMsat int64     `db:"commission_msat" json:"commissionMsat"`
	TaxFiat        float64   `db:"tax_fiat" json:"taxFiat"`
	TaxMsat        int64     `db:"tax_msat" json:"taxMsat"`
	Currency       string    `db:"currency" json:"currency"`
	PaymentRequest string    `db:"payment_request" json:"paymentRequest"`
	IsSettled      bool      `db:"is_settled" json:"isSettled"`
	IsExpired      bool      `db:"is_expired" json:"isExpired"`
	LastUpdated    time.Time `db:"last_updated" json:"lastUpdated"`
}

func (q *Queries) CreateSessionInvoice(ctx context.Context, arg CreateSessionInvoiceParams) (SessionInvoice, error) {
	row := q.db.QueryRowContext(ctx, createSessionInvoice,
		arg.SessionID,
		arg.AmountFiat,
		arg.AmountMsat,
		arg.CommissionFiat,
		arg.CommissionMsat,
		arg.TaxFiat,
		arg.TaxMsat,
		arg.Currency,
		arg.PaymentRequest,
		arg.IsSettled,
		arg.IsExpired,
		arg.LastUpdated,
	)
	var i SessionInvoice
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.AmountFiat,
		&i.AmountMsat,
		&i.CommissionFiat,
		&i.CommissionMsat,
		&i.TaxFiat,
		&i.TaxMsat,
		&i.Currency,
		&i.PaymentRequest,
		&i.IsSettled,
		&i.IsExpired,
		&i.LastUpdated,
	)
	return i, err
}

const getSessionInvoiceByPaymentRequest = `-- name: GetSessionInvoiceByPaymentRequest :one
SELECT id, session_id, amount_fiat, amount_msat, commission_fiat, commission_msat, tax_fiat, tax_msat, currency, payment_request, is_settled, is_expired, last_updated FROM session_invoices
  WHERE payment_request = $1
`

func (q *Queries) GetSessionInvoiceByPaymentRequest(ctx context.Context, paymentRequest string) (SessionInvoice, error) {
	row := q.db.QueryRowContext(ctx, getSessionInvoiceByPaymentRequest, paymentRequest)
	var i SessionInvoice
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.AmountFiat,
		&i.AmountMsat,
		&i.CommissionFiat,
		&i.CommissionMsat,
		&i.TaxFiat,
		&i.TaxMsat,
		&i.Currency,
		&i.PaymentRequest,
		&i.IsSettled,
		&i.IsExpired,
		&i.LastUpdated,
	)
	return i, err
}

const listSessionInvoices = `-- name: ListSessionInvoices :many
SELECT id, session_id, amount_fiat, amount_msat, commission_fiat, commission_msat, tax_fiat, tax_msat, currency, payment_request, is_settled, is_expired, last_updated FROM session_invoices
  WHERE session_id = $1
  ORDER BY id
`

func (q *Queries) ListSessionInvoices(ctx context.Context, sessionID int64) ([]SessionInvoice, error) {
	rows, err := q.db.QueryContext(ctx, listSessionInvoices, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SessionInvoice
	for rows.Next() {
		var i SessionInvoice
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.AmountFiat,
			&i.AmountMsat,
			&i.CommissionFiat,
			&i.CommissionMsat,
			&i.TaxFiat,
			&i.TaxMsat,
			&i.Currency,
			&i.PaymentRequest,
			&i.IsSettled,
			&i.IsExpired,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUnsettledSessionInvoices = `-- name: ListUnsettledSessionInvoices :many
SELECT id, session_id, amount_fiat, amount_msat, commission_fiat, commission_msat, tax_fiat, tax_msat, currency, payment_request, is_settled, is_expired, last_updated FROM session_invoices
  WHERE session_id = $1 AND is_settled != true
  ORDER BY id
`

func (q *Queries) ListUnsettledSessionInvoices(ctx context.Context, sessionID int64) ([]SessionInvoice, error) {
	rows, err := q.db.QueryContext(ctx, listUnsettledSessionInvoices, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SessionInvoice
	for rows.Next() {
		var i SessionInvoice
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.AmountFiat,
			&i.AmountMsat,
			&i.CommissionFiat,
			&i.CommissionMsat,
			&i.TaxFiat,
			&i.TaxMsat,
			&i.Currency,
			&i.PaymentRequest,
			&i.IsSettled,
			&i.IsExpired,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSessionInvoice = `-- name: UpdateSessionInvoice :one
UPDATE session_invoices SET (
    is_settled,
    is_expired,
    last_updated
  ) = ($2, $3, $4)
  WHERE id = $1
  RETURNING id, session_id, amount_fiat, amount_msat, commission_fiat, commission_msat, tax_fiat, tax_msat, currency, payment_request, is_settled, is_expired, last_updated
`

type UpdateSessionInvoiceParams struct {
	ID          int64     `db:"id" json:"id"`
	IsSettled   bool      `db:"is_settled" json:"isSettled"`
	IsExpired   bool      `db:"is_expired" json:"isExpired"`
	LastUpdated time.Time `db:"last_updated" json:"lastUpdated"`
}

func (q *Queries) UpdateSessionInvoice(ctx context.Context, arg UpdateSessionInvoiceParams) (SessionInvoice, error) {
	row := q.db.QueryRowContext(ctx, updateSessionInvoice,
		arg.ID,
		arg.IsSettled,
		arg.IsExpired,
		arg.LastUpdated,
	)
	var i SessionInvoice
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.AmountFiat,
		&i.AmountMsat,
		&i.CommissionFiat,
		&i.CommissionMsat,
		&i.TaxFiat,
		&i.TaxMsat,
		&i.Currency,
		&i.PaymentRequest,
		&i.IsSettled,
		&i.IsExpired,
		&i.LastUpdated,
	)
	return i, err
}
