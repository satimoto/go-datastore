// Code generated by sqlc. DO NOT EDIT.
// source: version.sql

package db

import (
	"context"
)

const createVersion = `-- name: CreateVersion :one
INSERT INTO versions (
    credential_id, 
    version, 
    url
  ) VALUES ($1, $2, $3)
  RETURNING id, credential_id, version, url
`

type CreateVersionParams struct {
	CredentialID int64  `db:"credential_id" json:"credentialID"`
	Version      string `db:"version" json:"version"`
	Url          string `db:"url" json:"url"`
}

func (q *Queries) CreateVersion(ctx context.Context, arg CreateVersionParams) (Version, error) {
	row := q.db.QueryRowContext(ctx, createVersion, arg.CredentialID, arg.Version, arg.Url)
	var i Version
	err := row.Scan(
		&i.ID,
		&i.CredentialID,
		&i.Version,
		&i.Url,
	)
	return i, err
}

const deleteVersions = `-- name: DeleteVersions :exec
DELETE FROM versions
  WHERE credential_id = $1
`

func (q *Queries) DeleteVersions(ctx context.Context, credentialID int64) error {
	_, err := q.db.ExecContext(ctx, deleteVersions, credentialID)
	return err
}

const getVersion = `-- name: GetVersion :one
SELECT id, credential_id, version, url FROM versions
  WHERE id = $1
`

func (q *Queries) GetVersion(ctx context.Context, id int64) (Version, error) {
	row := q.db.QueryRowContext(ctx, getVersion, id)
	var i Version
	err := row.Scan(
		&i.ID,
		&i.CredentialID,
		&i.Version,
		&i.Url,
	)
	return i, err
}

const listVersions = `-- name: ListVersions :many
SELECT id, credential_id, version, url FROM versions
  WHERE credential_id = $1
  ORDER BY CONCAT(version, REPEAT('.0', 4 - ARRAY_LENGTH(STRING_TO_ARRAY(version, '.'), 1)))::INET DESC
`

func (q *Queries) ListVersions(ctx context.Context, credentialID int64) ([]Version, error) {
	rows, err := q.db.QueryContext(ctx, listVersions, credentialID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Version
	for rows.Next() {
		var i Version
		if err := rows.Scan(
			&i.ID,
			&i.CredentialID,
			&i.Version,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
