// Code generated by sqlc. DO NOT EDIT.
// source: environmental_impact.sql

package db

import (
	"context"
)

const createEnvironmentalImpacts = `-- name: CreateEnvironmentalImpacts :one
INSERT INTO environmental_impacts (
    energy_mix_id, 
    source, 
    amount
  ) VALUES ($1, $2, $3)
  RETURNING id, energy_mix_id, source, amount
`

type CreateEnvironmentalImpactsParams struct {
	EnergyMixID int64                       `db:"energy_mix_id" json:"energyMixID"`
	Source      EnvironmentalImpactCategory `db:"source" json:"source"`
	Amount      float64                     `db:"amount" json:"amount"`
}

func (q *Queries) CreateEnvironmentalImpacts(ctx context.Context, arg CreateEnvironmentalImpactsParams) (EnvironmentalImpact, error) {
	row := q.db.QueryRowContext(ctx, createEnvironmentalImpacts, arg.EnergyMixID, arg.Source, arg.Amount)
	var i EnvironmentalImpact
	err := row.Scan(
		&i.ID,
		&i.EnergyMixID,
		&i.Source,
		&i.Amount,
	)
	return i, err
}

const deleteEnvironmentalImpacts = `-- name: DeleteEnvironmentalImpacts :exec
DELETE FROM environmental_impacts
  WHERE energy_mix_id = $1
`

func (q *Queries) DeleteEnvironmentalImpacts(ctx context.Context, energyMixID int64) error {
	_, err := q.db.ExecContext(ctx, deleteEnvironmentalImpacts, energyMixID)
	return err
}

const listEnvironmentalImpacts = `-- name: ListEnvironmentalImpacts :many
SELECT id, energy_mix_id, source, amount FROM environmental_impacts
  WHERE energy_mix_id = $1
  ORDER BY id
`

func (q *Queries) ListEnvironmentalImpacts(ctx context.Context, energyMixID int64) ([]EnvironmentalImpact, error) {
	rows, err := q.db.QueryContext(ctx, listEnvironmentalImpacts, energyMixID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EnvironmentalImpact
	for rows.Next() {
		var i EnvironmentalImpact
		if err := rows.Scan(
			&i.ID,
			&i.EnergyMixID,
			&i.Source,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
