// Code generated by sqlc. DO NOT EDIT.
// source: restriction_weekday.sql

package db

import (
	"context"
)

const listRestrictionWeekdays = `-- name: ListRestrictionWeekdays :many
SELECT w.id, w.text, w.description FROM weekdays w
  INNER JOIN restriction_weekdays rw ON rw.weekday_id == w.id
  WHERE rw.restriction_id == $1
  ORDER BY w.id
`

func (q *Queries) ListRestrictionWeekdays(ctx context.Context, restrictionID int64) ([]Weekday, error) {
	rows, err := q.db.QueryContext(ctx, listRestrictionWeekdays, restrictionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Weekday
	for rows.Next() {
		var i Weekday
		if err := rows.Scan(&i.ID, &i.Text, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setRestrictionWeekday = `-- name: SetRestrictionWeekday :exec
INSERT INTO restriction_weekdays (restriction_id, weekday_id)
  VALUES ($1, $2)
`

type SetRestrictionWeekdayParams struct {
	RestrictionID int64 `db:"restriction_id" json:"restrictionID"`
	WeekdayID     int64 `db:"weekday_id" json:"weekdayID"`
}

func (q *Queries) SetRestrictionWeekday(ctx context.Context, arg SetRestrictionWeekdayParams) error {
	_, err := q.db.ExecContext(ctx, setRestrictionWeekday, arg.RestrictionID, arg.WeekdayID)
	return err
}

const unsetRestrictionWeekdays = `-- name: UnsetRestrictionWeekdays :exec
DELETE FROM restriction_weekdays rw
  WHERE rw.restriction_id == $1
`

func (q *Queries) UnsetRestrictionWeekdays(ctx context.Context, restrictionID int64) error {
	_, err := q.db.ExecContext(ctx, unsetRestrictionWeekdays, restrictionID)
	return err
}
