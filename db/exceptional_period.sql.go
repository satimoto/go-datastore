// Code generated by sqlc. DO NOT EDIT.
// source: exceptional_period.sql

package db

import (
	"context"
	"time"
)

const createExceptionalPeriod = `-- name: CreateExceptionalPeriod :one
INSERT INTO exceptional_periods (
    opening_time_id, 
    period_type, 
    period_begin, 
    period_end
  ) VALUES ($1, $2, $3, $4)
  RETURNING id, opening_time_id, period_type, period_begin, period_end
`

type CreateExceptionalPeriodParams struct {
	OpeningTimeID int64      `db:"opening_time_id" json:"openingTimeID"`
	PeriodType    PeriodType `db:"period_type" json:"periodType"`
	PeriodBegin   time.Time  `db:"period_begin" json:"periodBegin"`
	PeriodEnd     time.Time  `db:"period_end" json:"periodEnd"`
}

func (q *Queries) CreateExceptionalPeriod(ctx context.Context, arg CreateExceptionalPeriodParams) (ExceptionalPeriod, error) {
	row := q.db.QueryRowContext(ctx, createExceptionalPeriod,
		arg.OpeningTimeID,
		arg.PeriodType,
		arg.PeriodBegin,
		arg.PeriodEnd,
	)
	var i ExceptionalPeriod
	err := row.Scan(
		&i.ID,
		&i.OpeningTimeID,
		&i.PeriodType,
		&i.PeriodBegin,
		&i.PeriodEnd,
	)
	return i, err
}

const deleteExceptionalClosingPeriods = `-- name: DeleteExceptionalClosingPeriods :exec
DELETE FROM exceptional_periods
  WHERE opening_time_id = $1 AND period_type = 'CLOSING'
`

func (q *Queries) DeleteExceptionalClosingPeriods(ctx context.Context, openingTimeID int64) error {
	_, err := q.db.ExecContext(ctx, deleteExceptionalClosingPeriods, openingTimeID)
	return err
}

const deleteExceptionalOpeningPeriods = `-- name: DeleteExceptionalOpeningPeriods :exec
DELETE FROM exceptional_periods
  WHERE opening_time_id = $1 AND period_type = 'OPENING'
`

func (q *Queries) DeleteExceptionalOpeningPeriods(ctx context.Context, openingTimeID int64) error {
	_, err := q.db.ExecContext(ctx, deleteExceptionalOpeningPeriods, openingTimeID)
	return err
}

const listExceptionalClosingPeriods = `-- name: ListExceptionalClosingPeriods :many
SELECT id, opening_time_id, period_type, period_begin, period_end FROM exceptional_periods
  WHERE opening_time_id = $1 AND period_type = 'CLOSING'
  ORDER BY id
`

func (q *Queries) ListExceptionalClosingPeriods(ctx context.Context, openingTimeID int64) ([]ExceptionalPeriod, error) {
	rows, err := q.db.QueryContext(ctx, listExceptionalClosingPeriods, openingTimeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExceptionalPeriod
	for rows.Next() {
		var i ExceptionalPeriod
		if err := rows.Scan(
			&i.ID,
			&i.OpeningTimeID,
			&i.PeriodType,
			&i.PeriodBegin,
			&i.PeriodEnd,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listExceptionalOpeningPeriods = `-- name: ListExceptionalOpeningPeriods :many
SELECT id, opening_time_id, period_type, period_begin, period_end FROM exceptional_periods
  WHERE opening_time_id = $1 AND period_type = 'OPENING'
  ORDER BY id
`

func (q *Queries) ListExceptionalOpeningPeriods(ctx context.Context, openingTimeID int64) ([]ExceptionalPeriod, error) {
	rows, err := q.db.QueryContext(ctx, listExceptionalOpeningPeriods, openingTimeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExceptionalPeriod
	for rows.Next() {
		var i ExceptionalPeriod
		if err := rows.Scan(
			&i.ID,
			&i.OpeningTimeID,
			&i.PeriodType,
			&i.PeriodBegin,
			&i.PeriodEnd,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
