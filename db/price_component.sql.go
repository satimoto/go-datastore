// Code generated by sqlc. DO NOT EDIT.
// source: price_component.sql

package db

import (
	"context"
)

const createPriceComponent = `-- name: CreatePriceComponent :one
INSERT INTO price_components (
    element_id,
    type,
    price,
    step_size
  ) VALUES ($1, $2, $3, $4)
  RETURNING id, element_id, type, price, step_size
`

type CreatePriceComponentParams struct {
	ElementID int64           `db:"element_id" json:"elementID"`
	Type      TariffDimension `db:"type" json:"type"`
	Price     float64         `db:"price" json:"price"`
	StepSize  int32           `db:"step_size" json:"stepSize"`
}

func (q *Queries) CreatePriceComponent(ctx context.Context, arg CreatePriceComponentParams) (PriceComponent, error) {
	row := q.db.QueryRowContext(ctx, createPriceComponent,
		arg.ElementID,
		arg.Type,
		arg.Price,
		arg.StepSize,
	)
	var i PriceComponent
	err := row.Scan(
		&i.ID,
		&i.ElementID,
		&i.Type,
		&i.Price,
		&i.StepSize,
	)
	return i, err
}

const deletePriceComponents = `-- name: DeletePriceComponents :exec
DELETE FROM price_components pc
  USING elements e
  WHERE pc.element_id = e.id AND e.tariff_id = $1
`

func (q *Queries) DeletePriceComponents(ctx context.Context, tariffID int64) error {
	_, err := q.db.ExecContext(ctx, deletePriceComponents, tariffID)
	return err
}

const listPriceComponents = `-- name: ListPriceComponents :many
SELECT id, element_id, type, price, step_size FROM price_components
  WHERE element_id = $1
  ORDER BY id
`

func (q *Queries) ListPriceComponents(ctx context.Context, elementID int64) ([]PriceComponent, error) {
	rows, err := q.db.QueryContext(ctx, listPriceComponents, elementID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PriceComponent
	for rows.Next() {
		var i PriceComponent
		if err := rows.Scan(
			&i.ID,
			&i.ElementID,
			&i.Type,
			&i.Price,
			&i.StepSize,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
