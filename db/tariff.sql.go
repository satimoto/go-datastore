// Code generated by sqlc. DO NOT EDIT.
// source: tariff.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createTariff = `-- name: CreateTariff :one
INSERT INTO tariffs (
    uid, 
    cdr_id,
    currency, 
    tariff_alt_url, 
    energy_mix_id, 
    last_updated
  ) VALUES ($1, $2, $3, $4, $5, $6)
  RETURNING id, uid, currency, tariff_alt_url, energy_mix_id, last_updated, cdr_id
`

type CreateTariffParams struct {
	Uid          string         `db:"uid" json:"uid"`
	CdrID        sql.NullInt64  `db:"cdr_id" json:"cdrID"`
	Currency     string         `db:"currency" json:"currency"`
	TariffAltUrl sql.NullString `db:"tariff_alt_url" json:"tariffAltUrl"`
	EnergyMixID  sql.NullInt64  `db:"energy_mix_id" json:"energyMixID"`
	LastUpdated  time.Time      `db:"last_updated" json:"lastUpdated"`
}

func (q *Queries) CreateTariff(ctx context.Context, arg CreateTariffParams) (Tariff, error) {
	row := q.db.QueryRowContext(ctx, createTariff,
		arg.Uid,
		arg.CdrID,
		arg.Currency,
		arg.TariffAltUrl,
		arg.EnergyMixID,
		arg.LastUpdated,
	)
	var i Tariff
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Currency,
		&i.TariffAltUrl,
		&i.EnergyMixID,
		&i.LastUpdated,
		&i.CdrID,
	)
	return i, err
}

const deleteTariffByUid = `-- name: DeleteTariffByUid :exec
DELETE FROM tariffs
  WHERE uid = $1 AND cdr_id IS NULL
`

func (q *Queries) DeleteTariffByUid(ctx context.Context, uid string) error {
	_, err := q.db.ExecContext(ctx, deleteTariffByUid, uid)
	return err
}

const getTariffByUid = `-- name: GetTariffByUid :one
SELECT id, uid, currency, tariff_alt_url, energy_mix_id, last_updated, cdr_id FROM tariffs
  WHERE uid = $1 AND cdr_id IS NULL
`

func (q *Queries) GetTariffByUid(ctx context.Context, uid string) (Tariff, error) {
	row := q.db.QueryRowContext(ctx, getTariffByUid, uid)
	var i Tariff
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Currency,
		&i.TariffAltUrl,
		&i.EnergyMixID,
		&i.LastUpdated,
		&i.CdrID,
	)
	return i, err
}

const listTariffsByCdr = `-- name: ListTariffsByCdr :many
SELECT id, uid, currency, tariff_alt_url, energy_mix_id, last_updated, cdr_id FROM tariffs
  WHERE cdr_id = $1
  ORDER BY id
`

func (q *Queries) ListTariffsByCdr(ctx context.Context, cdrID sql.NullInt64) ([]Tariff, error) {
	rows, err := q.db.QueryContext(ctx, listTariffsByCdr, cdrID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tariff
	for rows.Next() {
		var i Tariff
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.Currency,
			&i.TariffAltUrl,
			&i.EnergyMixID,
			&i.LastUpdated,
			&i.CdrID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTariffByUid = `-- name: UpdateTariffByUid :one
UPDATE tariffs SET (
    currency, 
    tariff_alt_url,
    energy_mix_id, 
    last_updated
  ) = ($2, $3, $4, $5)
  WHERE uid = $1 AND cdr_id IS NULL
  RETURNING id, uid, currency, tariff_alt_url, energy_mix_id, last_updated, cdr_id
`

type UpdateTariffByUidParams struct {
	Uid          string         `db:"uid" json:"uid"`
	Currency     string         `db:"currency" json:"currency"`
	TariffAltUrl sql.NullString `db:"tariff_alt_url" json:"tariffAltUrl"`
	EnergyMixID  sql.NullInt64  `db:"energy_mix_id" json:"energyMixID"`
	LastUpdated  time.Time      `db:"last_updated" json:"lastUpdated"`
}

func (q *Queries) UpdateTariffByUid(ctx context.Context, arg UpdateTariffByUidParams) (Tariff, error) {
	row := q.db.QueryRowContext(ctx, updateTariffByUid,
		arg.Uid,
		arg.Currency,
		arg.TariffAltUrl,
		arg.EnergyMixID,
		arg.LastUpdated,
	)
	var i Tariff
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Currency,
		&i.TariffAltUrl,
		&i.EnergyMixID,
		&i.LastUpdated,
		&i.CdrID,
	)
	return i, err
}
