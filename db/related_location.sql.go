// Code generated by sqlc. DO NOT EDIT.
// source: related_location.sql

package db

import (
	"context"
)

const deleteRelatedLocations = `-- name: DeleteRelatedLocations :exec
DELETE FROM geo_locations gl
  USING related_locations rl
  WHERE rl.geo_location_id = gl.id AND rl.location_id = $1
`

func (q *Queries) DeleteRelatedLocations(ctx context.Context, locationID int64) error {
	_, err := q.db.ExecContext(ctx, deleteRelatedLocations, locationID)
	return err
}

const listRelatedLocations = `-- name: ListRelatedLocations :many
SELECT gl.id, gl.latitude, gl.longitude, gl.name FROM geo_locations gl
  INNER JOIN related_locations rl ON rl.geo_location_id = gl.id
  WHERE rl.location_id = $1
  ORDER BY gl.id
`

func (q *Queries) ListRelatedLocations(ctx context.Context, locationID int64) ([]GeoLocation, error) {
	rows, err := q.db.QueryContext(ctx, listRelatedLocations, locationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GeoLocation
	for rows.Next() {
		var i GeoLocation
		if err := rows.Scan(
			&i.ID,
			&i.Latitude,
			&i.Longitude,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setRelatedLocation = `-- name: SetRelatedLocation :exec
INSERT INTO related_locations (location_id, geo_location_id)
  VALUES ($1, $2)
`

type SetRelatedLocationParams struct {
	LocationID    int64 `db:"location_id" json:"locationID"`
	GeoLocationID int64 `db:"geo_location_id" json:"geoLocationID"`
}

func (q *Queries) SetRelatedLocation(ctx context.Context, arg SetRelatedLocationParams) error {
	_, err := q.db.ExecContext(ctx, setRelatedLocation, arg.LocationID, arg.GeoLocationID)
	return err
}
